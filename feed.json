{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "subtitle": "uncleacc",
    "icon": "http://yoursite.com/images/favicon.ico",
    "description": "真正的大师永远有一颗学徒的心",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/BeautifyWin10/",
            "url": "http://yoursite.com/BeautifyWin10/",
            "title": "win10美化",
            "date_published": "2020-12-10T13:48:52.000Z",
            "content_html": "<blockquote>\n<p>你是否还在为这丑陋的 window10 界面而叹气 (<s>win10 界面其实还可以</s>)，你是否还在为怎么美化界面而烦恼？不用叹气，不用烦恼！这篇博客可以解决你的问题</p>\n</blockquote>\n<p>众所周知，一个简单漂亮的界面对人的心情也是有很大影响的，假如一个人不整理文件，桌面上乱七八糟，什么都往桌面上放，那迟早是受不了的，将来一定有一天你都不想开电脑</p>\n<p>先来放一张美化过后的图片吧</p>\n<p><img data-src=\"https://raw.githubusercontent.com/uncleacc/Sucai/master/20201210215846.png\" alt=\"\" /></p>\n<p>效果还不错吧</p>\n<p>强烈推荐 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHV0aXguY29tLw==\">致美化</span>（里面什么都有）</p>\n<h2 id=\"mydock\"><a class=\"anchor\" href=\"#mydock\">#</a> Mydock</h2>\n<p>仿 MAC-dock 栏，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXlkb2NrZmluZGVyLmNvbS8=\">官网</span>，随便选择一个下载渠道，下载后安装</p>\n<p><img data-src=\"https://raw.githubusercontent.com/uncleacc/Sucai/master/20201210225441.png\" alt=\"\" /></p>\n<p>找到一个空白地方右击可以设置大小，图标，开机启动等等，还可以设置最小化动画</p>\n<h2 id=\"translucent汉化版\"><a class=\"anchor\" href=\"#translucent汉化版\">#</a> Translucent (汉化版)</h2>\n<p>任务栏透明化，在桌面时可以使任务栏变得透明，点击左下角 windows 图标，选择所有应用，找到 M 开头的应用，找到 Micrsoft Store，打开后搜索 Translucent (汉化版) 一定要是汉化版<s>除非您是英语大佬</s></p>\n<p><img data-src=\"https://raw.githubusercontent.com/uncleacc/Sucai/master/20201210225839.png\" alt=\"image-20201210225837762\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/uncleacc/Sucai/master/20201211080515.png\" alt=\"\" /></p>\n<p>下载就可以了</p>\n<h2 id=\"雨滴皮肤\"><a class=\"anchor\" href=\"#雨滴皮肤\">#</a> 雨滴皮肤</h2>\n<p>雨滴是一款占内存非常小的软件，里面有桌面时钟效果，可以添加到桌面动态时钟</p>\n<p>皮肤下载地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHV0aXguY29tL3RhZy9yYWlubWV0ZXIv\">Here</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/uncleacc/Sucai/master/20201211081513.png\" alt=\"\" /></p>\n<p>自行设置效果吧</p>\n<p>本人还是觉得简约效果最好:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/uncleacc/Sucai/master/20201211081020.png\" alt=\"alt\" title=\"这里是 title\" /></p>\n<h2 id=\"任务栏图标居中\"><a class=\"anchor\" href=\"#任务栏图标居中\">#</a> 任务栏图标居中</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/uncleacc/Sucai/master/20201211081650.png\" alt=\"\" /></p>\n<p>找一个安全位置新建一个文件夹，命名为 “任务栏”，右击任务栏，选择工具栏 &gt; 新建工具栏，打开刚才新建的文件夹，之后点击两条竖线可以拖动图标（如果你不能拖动右击看看你是不是把任务栏锁定住了），将新建的工具栏拖动到最左面，然后把图标拖动到中间即可，“任务栏” 文件夹中的文件会被展示到任务栏上，可以利用这点添加我的电脑快捷方式和关机.bat，可以更加方便你的操作，其次右击任务栏还可以隐藏图标名字，把任务栏变小，最后锁定住任务栏即可</p>\n<p><img data-src=\"https://raw.githubusercontent.com/uncleacc/Sucai/master/20201211081921.png\" alt=\"\" /></p>\n<h2 id=\"utools\"><a class=\"anchor\" href=\"#utools\">#</a> uTools</h2>\n<p>百度 <code>uTools</code> ，下载，按住 Alt+Space 可以弹出搜索框，可以搜索到电脑里面的各种软件，关键在于里面有很多插件，和 Everything 搭配使用可以直接代替 Everything。如果你是一个有过 Linux 经历，能敲键盘就绝不动鼠标，那这个就是你的绝佳选择。</p>\n<h2 id=\"windowblinds10\"><a class=\"anchor\" href=\"#windowblinds10\">#</a> WindowBlinds10</h2>\n<p>一款可以更换主题风格的软件，而且其内存占用非常小，而且没有什么 Bug，非常稳定，所以推荐这款软件，它可以把你的电脑风格换成 Mac 的样式，这个自行探索吧，下载链接 <code>致美化</code> 里面有</p>\n<p>&lt;font color=&quot;red&quot; size=6&gt; 最后不推荐大家使用 &quot;Startdocks&quot;，个人就被它折磨的恢复过系统，系统还原点非常重要！&lt;/font&gt;</p>\n",
            "tags": [
                "技术",
                "win10"
            ]
        },
        {
            "id": "http://yoursite.com/Binary-Tree/",
            "url": "http://yoursite.com/Binary-Tree/",
            "title": "Binary Tree",
            "date_published": "2020-11-30T14:11:18.000Z",
            "content_html": "<blockquote>\n<p>实验目标：<br />\n1、创建二叉树<br />\n 2、用非递归算法先中后序遍历二叉树 (难点)<br />\n 3、分别求出二叉树中度为 0、1、2 的结点个数<br />\n 4、求出树的高度</p>\n</blockquote>\n<blockquote>\n<p>参考博客:<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZG9scGhpbjA1MjAvYXJjaGl2ZS8yMDExLzA4LzI1LzIxNTM3MjAuaHRtbA==\">Article_1</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmFpbi1sZWkvcC8zNzA1NjgwLmh0bWw=\">Article_2</span></p>\n</blockquote>\n<p>难点在于非递归遍历，用栈来模拟递归的过程</p>\n<h2 id=\"二叉树结构\"><a class=\"anchor\" href=\"#二叉树结构\">#</a> 二叉树结构</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>BiTNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"创建二叉树\"><a class=\"anchor\" href=\"#创建二叉树\">#</a> 创建二叉树</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span> cin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> t<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tt<span class=\"token operator\">=</span>new node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tt<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建左子树 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建右子树 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"层序遍历\"><a class=\"anchor\" href=\"#层序遍历\">#</a> 层序遍历</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Level</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"层序遍历:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//STL 队列定义 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tBiTree fr<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>fr<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fr<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fr<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"前序遍历\"><a class=\"anchor\" href=\"#前序遍历\">#</a> 前序遍历</h2>\n<h4 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">preOrder1</span><span class=\"token punctuation\">(</span>BinTree <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 递归前序遍历 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>root<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">preOrder1</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">preOrder1</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"非递归\"><a class=\"anchor\" href=\"#非递归\">#</a> 非递归</h4>\n<p><code>用栈模拟递归</code></p>\n<p>对比递归算法，当递归调用自己时就 <code>把当前状态入栈</code> ！</p>\n<p>操作： 对于当前子树，1. 不空就输出根节点并把当前指针入栈，然后更新指针指向左子树，2. 空就更新指针指向栈顶的右子树</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PreOreder</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"前序遍历:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>L<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tL<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tL<span class=\"token operator\">=</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tL<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"中序遍历\"><a class=\"anchor\" href=\"#中序遍历\">#</a> 中序遍历</h2>\n<h4 id=\"递归-2\"><a class=\"anchor\" href=\"#递归-2\">#</a> 递归</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">inOrder1</span><span class=\"token punctuation\">(</span>BinTree <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 递归中序遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">inOrder1</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>root<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">inOrder1</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"非递归-2\"><a class=\"anchor\" href=\"#非递归-2\">#</a> 非递归</h4>\n<p>和前序一样，只不过改成在当前节点没有左子树时输出</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MidOreder</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"中序遍历:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tL <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tL <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>L<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tL<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"后序遍历\"><a class=\"anchor\" href=\"#后序遍历\">#</a> 后序遍历</h2>\n<h4 id=\"递归-3\"><a class=\"anchor\" href=\"#递归-3\">#</a> 递归</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">postOrder1</span><span class=\"token punctuation\">(</span>BinTree <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 递归后序遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">postOrder1</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">postOrder1</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>root<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"非递归-3\"><a class=\"anchor\" href=\"#非递归-3\">#</a> 非递归</h4>\n<p>后序遍历的非递归实现是三种遍历方式中最难的一种。因为在后序遍历中，要保证左孩子和右孩子都已被访问并且左孩子在右孩子前访问才能访问根结点，这就为流程的控制带来了难题，解决方案如下。</p>\n<p>要保证根结点在左孩子和右孩子访问之后才能访问，因此对于任一结点 P，先将其入栈。如果 P 不存在左孩子和右孩子，则可以直接访问它；或者 P 存在左孩子或者右孩子，但是其左孩子和右孩子都已被访问过了，则同样可以直接访问该结点。若非上述两种情况，则将 P 的右孩子和左孩子依次入栈，这样就保证了每次取栈顶元素的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根结点前面被访问。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>也就是模拟递归</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>对于当前节点，只有当左子树和右子树都访问过或者为空时才能输出当前节点，有一个存在且没有访问过就需要先访问它，而栈是先进后</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>出，所以入栈顺序先放右子树在放左子树</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>如何判断是否访问过？</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>我们可以保存上一个访问的节点 pre，如果满足 (p->right==NULL &amp;&amp; pre==p->left) || pre=p->right，那么显然 p 的孩子都访问</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>过了，接下来可以访问 p </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"后序遍历:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> st<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tBiTree pre<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tBiTree temp<span class=\"token operator\">=</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>temp<span class=\"token operator\">-></span>lchild <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>temp<span class=\"token operator\">-></span>rchild <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span>pre<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> temp<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tpre<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>求度数简单这里不单独放代码了</p>\n<h2 id=\"全代码\"><a class=\"anchor\" href=\"#全代码\">#</a> 全代码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>实验目标：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1、创建二叉树</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2、用非递归算法先中后序遍历二叉树</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>3、分别求出二叉树中度为 0、1、2 的结点个数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>4、求出树的高度</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>难点在于非递归遍历，用栈来模拟递归的过程，这里我用了 STL 里面的栈，只需要知道栈的操作干什么即可，不需要知道原理 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>代码输入方式：输入一颗树的先序序列，空节点用 \"#\" 代替 </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>参考博客: </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>https://www.cnblogs.com/dolphin0520/archive/2011/08/25/2153720.html</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>https://www.cnblogs.com/rain-lei/p/3705680.html </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>lchild<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span>BiTNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>BiTree<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> cnt0<span class=\"token punctuation\">,</span>cnt1<span class=\"token punctuation\">,</span>cnt2<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 递归利用先序遍历方式创建二叉树，空节点用 \"#\" 代替 </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span>BiTree <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span> cin<span class=\"token operator\">>></span>ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">==</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> t<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tt<span class=\"token operator\">=</span>new node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tt<span class=\"token operator\">-></span>data<span class=\"token operator\">=</span>ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建左子树 </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建右子树 </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>BiTree t<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 传入高度参数 </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\thigh<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>high<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 以最大高度节点为准 </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>lchild <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span> cnt2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 度为 2 </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token operator\">-></span>lchild <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>t<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span> cnt0<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 度为 0 </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">else</span> cnt1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 度为 1 </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">,</span>h<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 左子树 </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">,</span>h<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 右子树 </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 层序遍历利用 BFS 输出 (实验不做要求)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Level</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"层序遍历:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//STL 队列定义 </span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tBiTree fr<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fr<span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>fr<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fr<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fr<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>用栈模拟递归 </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>操作：</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>对于当前子树根节点，1. 如果当前子树不为空就输出子树根节点并把左子树入栈，指针指向左子树，2. 为空则 pop 出栈顶元素，并</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>将此时栈顶根节点的右子树入栈 </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>*/</span> </pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PreOreder</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"前序遍历:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>L<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\tL<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\tL<span class=\"token operator\">=</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\tL<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>和先序类似，就是先处理完左子树再输出根节点然后把右子树入栈 </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>*/</span> </pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MidOreder</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"中序遍历:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\tL <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\tL <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>L<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\tL<span class=\"token operator\">=</span>L<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>也就是模拟递归</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>对于当前节点，只有当左子树和右子树都访问过或者为空时才能输出当前节点，有一个存在且没有访问过就需要先访问它，而栈是先进后</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>出，所以入栈顺序先放右子树在放左子树</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>如何判断是否访问过？</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>我们可以保存上一个访问的节点 pre，如果满足 (p->right==NULL &amp;&amp; pre==p->left) || pre=p->right，那么显然 p 的孩子都访问</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>过了，接下来可以访问 p </pre></td></tr><tr><td data-num=\"106\"></td><td><pre>*/</span> </pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"后序遍历:\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>L<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tstack<span class=\"token operator\">&lt;</span>BiTree<span class=\"token operator\">></span> st<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tst<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\tBiTree pre<span class=\"token operator\">=</span>L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tBiTree temp<span class=\"token operator\">=</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>temp<span class=\"token operator\">-></span>lchild <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>temp<span class=\"token operator\">-></span>rchild <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token operator\">-></span>lchild<span class=\"token operator\">==</span>pre<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> temp<span class=\"token operator\">-></span>rchild<span class=\"token operator\">==</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>temp<span class=\"token operator\">-></span>data<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\tpre<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\tst<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>rchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span>lchild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Traverse</span><span class=\"token punctuation\">(</span>BiTree L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token function\">Level</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 层序遍历 </span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token function\">PreOreder</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 前序遍历 </span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token function\">MidOreder</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 中序遍历 </span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token function\">PostOrder</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 后序遍历 </span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\tBiTree L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token function\">CreateBiTree</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建二叉树 </span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token function\">Traverse</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 遍历二叉树 </span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 找到二叉树度数为 0、1、2 的结点数，并得出深度 </span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"树的高度为: \"</span><span class=\"token operator\">&lt;&lt;</span>high<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"度数为0的节点数量: \"</span><span class=\"token operator\">&lt;&lt;</span>cnt0<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"度数为1的节点数量: \"</span><span class=\"token operator\">&lt;&lt;</span>cnt1<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"度数为2的节点数量: \"</span><span class=\"token operator\">&lt;&lt;</span>cnt2<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "数据结构"
            ]
        },
        {
            "id": "http://yoursite.com/bz&&tarjan/",
            "url": "http://yoursite.com/bz&&tarjan/",
            "title": "倍增与tarjan求解lca",
            "date_published": "2020-11-23T13:50:44.000Z",
            "content_html": "<blockquote>\n<p><strong>倍增</strong></p>\n<p>以倍增方式向上跳，时间复杂度是 O (q*logn)</p>\n<p><strong>tarjan</strong></p>\n<p>树上算法，实现过程通过 dfs + 并查集来离线求出 lca (最近公共祖先)，时间复杂度 O (n+q)，n 是结点数，q 是查询数</p>\n</blockquote>\n<h2 id=\"算法实现过程\"><a class=\"anchor\" href=\"#算法实现过程\">#</a> 算法实现过程</h2>\n<p><strong>倍增算法流程:</strong></p>\n<ol>\n<li>\n<p>用一个 dfs 得出每一个点的父亲节点还有它的深度，用数组保存起来，其中保存父亲的数组用 dp [i][j] 表示，意义是 i 节点向上跳 2<sup>j</sup> 步后到达的节点，父亲节点保存在 dp [i][0] 中</p>\n<pre><code class=\"language-C\">void dfs(int u,int fa,int d)&#123;  //得到每一个点的深度和父亲节点\n\tdp[u][0]=fa;\n\tdep[u]=d;\n\tfor(int i=head[u];~i;i=e[i].next)&#123;\n\t\tint v=e[i].to;\n\t\tif(v!=fa) dfs(v,u,d+1);\n\t&#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>然后倍增预处理出每一个节点向上跳 2<sup>i</sup> 步到的的节点</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 预处理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">22</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>u<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>u<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tdp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>dp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>求两个点的 lca 时，先让深度小的跳到两个点深度相同的位置，如果跳后两个点重合则这个位置就是 lca，否则两个点一起往上跳，直到 lca 的儿子节点</p>\n<pre><code class=\"language-c++\">int lca(int u,int v)&#123;\n\tif(dep[u]&lt;dep[v]) swap(u,v);\n\tfor(int i=log2(dep[u]-dep[v]);i&gt;=0;i--)&#123;  //跳到相同深度\n\t\tif((1&lt;&lt;i)&lt;=dep[u]-dep[v]) u=dp[u][i]; //注意dep[x]-dep[y]时刻在变化，也正是因为这个所以dep[x]一定最后和dep[y]相等\n\t&#125;\n\tif(u==v) return u;  //节点重合即lca\n\tfor(int i=log2(dep[u]);i&gt;=0;i--)&#123;  //一起往上跳\n\t\tif(dp[u][i]!=dp[v][i])&#123;  //保证不会跳过lca，但同样的也不能跳到lca了，回跳到lca的儿子结点\n\t\t\tu=dp[u][i];\n\t\t\tv=dp[v][i];\n\t\t&#125;\n\t&#125;\n\treturn dp[u][0];  //父亲节点即为lca \n&#125;\n</code></pre>\n</li>\n</ol>\n<p><strong>tarjan 算法流程：</strong></p>\n<ol>\n<li>\n<p>保存用两个图去存树和查询关系图</p>\n</li>\n<li>\n<p>对这棵树进行 dfs 搜索，从根开始，搜索到一个点把这个点标记，直到把当前结点的 <code>所有子树都被标记并和它们的父亲结点合并</code> 后，再查询哪些结点和当前结点有查询关系，对于这些结点如果已经被标记过了，那么这个节点的祖先就是这两个点的最近公共祖先 (这里是难点)</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">tarjan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tvis<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>head<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token operator\">~</span>i<span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> v<span class=\"token operator\">=</span>e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token function\">tarjan</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 到这里 u 结点还没有向上合并</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tfa<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>u<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 合并下一个结点和当前结点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>当得出两个点的 Lca 后储存答案到 lca 数组中，因为查询关系图是无向图，不知道 dfs 搜索时顺序如何，需要给每一条查询关系图的边编个号，把 lca 答案储存到偶数或者奇数下标内</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> lca<span class=\"token punctuation\">[</span>ve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span> lca<span class=\"token punctuation\">[</span>ve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>为什么和当前点有查询关系的那个点被标记后那个点的祖先就是最近公共祖先呢？</p>\n<p>无非就两种情况，用 u 表示当前结点，v 表示另一个点，因为 v 被标记过，说明 v 一定在 u 之前被访问过，那么 v 要不就是在 u 的子树中，这种情况 v 的祖先就是 u， <code>因为u还没有向上合并(u以下的所有子树都已经合并完成了)</code> ，要不就是不和 u 在一个分支里，那么 dfs 一定是经过 u 和 v 的 lca 结点的，这时两个点的路径连线就是一个角，角的顶点就是 lca</p>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDMzNzk=\">链接</span></p>\n<h3 id=\"tarjan\"><a class=\"anchor\" href=\"#tarjan\">#</a> tarjan</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN<span class=\"token operator\">=</span><span class=\"token number\">500100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> to<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>e<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 无向边记得开两倍空间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">xxx</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 关系图的编号要储存下来</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> to<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>xxx<span class=\"token operator\">></span> ve<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储关系图</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>bool vis<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>head<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>lca<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 两倍查询关系无向图</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> tot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\te<span class=\"token punctuation\">[</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\te<span class=\"token punctuation\">[</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>head<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\thead<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">tarjan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tvis<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>head<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token operator\">~</span>i<span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> v<span class=\"token operator\">=</span>e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">tarjan</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tfa<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">int</span> sz<span class=\"token operator\">=</span>ve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> v<span class=\"token operator\">=</span>ve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> lca<span class=\"token punctuation\">[</span>ve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> lca<span class=\"token punctuation\">[</span>ve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\ttot<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tfa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\thead<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token operator\">>></span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>u<span class=\"token operator\">>></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>u<span class=\"token operator\">>></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tve<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意这里放进去这条边的编号</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tve<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>u<span class=\"token punctuation\">,</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">tarjan</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 输出偶数下标的 lca 数组</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span>lca<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"倍增\"><a class=\"anchor\" href=\"#倍增\">#</a> 倍增</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN<span class=\"token operator\">=</span><span class=\"token number\">500500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> to<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>e<span class=\"token punctuation\">[</span>MAXN<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> head<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dep<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> tot<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\te<span class=\"token punctuation\">[</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\te<span class=\"token punctuation\">[</span>tot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>head<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\thead<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 得到每一个点的深度和父亲节点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tdp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tdep<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>head<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token operator\">~</span>i<span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> v<span class=\"token operator\">=</span>e<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">!=</span>fa<span class=\"token punctuation\">)</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span>u<span class=\"token punctuation\">,</span>d<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 预处理</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">22</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>u<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>u<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tdp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>dp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lca</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>dep<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>dep<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 跳到相同深度</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span>dep<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>dep<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> u<span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意 dep [x]-dep [y] 时刻在变化，也正是因为这个所以 dep [x] 一定最后和 dep [y] 相等</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>u<span class=\"token operator\">==</span>v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 节点重合即 lca</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 一起往上跳</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 保证不会跳过 lca，但同样的也不能跳到 lca 了，回跳到 lca 的儿子结点</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tu<span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tv<span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 父亲节点即为 lca </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token operator\">>></span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> head<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>u<span class=\"token operator\">>></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">bz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>u<span class=\"token operator\">>></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">lca</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "tarjan"
            ]
        },
        {
            "id": "http://yoursite.com/CCPC-iron-making-record/",
            "url": "http://yoursite.com/CCPC-iron-making-record/",
            "title": "CCPC打铁记",
            "date_published": "2020-10-22T04:18:00.000Z",
            "content_html": "<blockquote>\n<p>2020 年 10 月 18 日，这一天是我第一次打比赛的日子，非常有纪念意义，但是时至今日我才补了这篇文章</p>\n</blockquote>\n<p>2020 年注定是不平凡的一年，突如其来的疫情改变很多人的生活轨迹，原本该在这一年大展拳脚的学长们无奈只能在家里打着练习赛，然而对我们而言，有好也有坏吧，好的是我们有更多时间去提升自己 (当然全靠自觉)，坏的是少了许多阅历，不管怎样，终于在 2020 年 8 月 29 日我们开学了，开学后经过一个星期的过渡，又回到了算法的训练中去，在下面也打了许多训练赛，每次都紧紧抱着大佬的大腿，每次成绩也都还不错 (不错指的是会的都比较快的做出来了)，然而只要是 dp 只要是新算法我们就止步于此了</p>\n<p>又过了一个月，我们迎来的这一年的 CCPC 邀请赛，首先是出线问题，最终学长们也都打进去了，我们 19 级的因为时间还多，机会就都留给学长们了，不过一星期后，老师跟我们说可以办外卡，也可以参赛拿奖，高兴了我一天，当时我以为是线下赛，想着终于可以出去涨涨见识了，然而第二天就丧了，因为疫情，这一年几乎所有比赛都是线上举行的！一下子感觉气氛都不对了，不过毕竟是比赛，比赛前我还是有去多刷题的，然而因为好多新算法都没学，有很多题目都是干瞪眼</p>\n<p>终于到了比赛的前一天，这一天有热身赛，而且这一天还有蓝桥杯，我被叫去当监考了，报酬是 “管饭”，到了才知道上一年 19 级也有好多人报了蓝桥杯，顿时心理不平衡了。。。也是无聊的看了一上午手机，就到了中午，饭还行，挺好吃的，吃撑了～，吃完没有睡觉直接去打热身赛了，教师布置的有模有样地，开了热身赛，我们瞬间 A 了签到题，又过了不久 A 了第二道，然后就没有然后了。。剩下两道做出来的屈指可数，还得到了俩气球，哈哈哈。晚上我们队伍一起去吃饭，吃完后直接去机房打印板子去了，由于热身赛手推了高中的许多公式，我们打印的板子都集中到了高中数学公式上，能用一个都是赚的！终于这一天结束了，我们约定明天要拿铜牌🥉，晚上 11 点睡觉，然而我还是失眠了。。12 点半才睡着</p>\n<p>第二天早早起来，拿上该拿的东西，走向了机房，换上队服，拍了照片，进入系统，熟练的打开了 DEV。终于比赛开始了，没有人过题，我们仨只能瞎找，过了两分钟，A 题有人过了，我们一看是水题，然后他俩写代码，我就去看下一道了，第二道是一个数学题，然而我看错题了，我把向下取整符号看成了绝对值。。导致我们仨浪费了 3 分钟的时间整理了一个错误的思路，我背锅，发现向下取整后，潘佬爷瞬间有了思路，他给我们手推样例，看了一会，我也懂了，原以为通过这个规律推出一个数学式子，后来发现通过这个规律直接暴力就可以了，潘佬爷 txdy，过了不久 A 了第二题，然后我们看向了 E，正解是双指针 (尺取)，而我们先是贪心，后来动规，发现解不出来，就看向了 G 题，是一个判环的题目，由于之前没学过判环，我们仨都没有把握，潘姥爷提出了标记结点的思路，然后我们俩疯狂造数据，疯狂验证，最终证明这个方法是对的，只不过因为题目有一些小坑，wrong 了三发，我们一度怀疑算法有问题～A 了 3 题后我们排名还是排到了两百开外，我们也就止步于此了，第四题我们怎么也不知道怎么做，最后 2 小时多我们划了，哎，打铁了</p>\n<p>然而女队却很幸运，只过了两题，竟然混了一个铜牌，太搞了太搞了，晚上我们聚在一起吃了一顿饭，商量了一下以后的训练，希望我们下次不再打铁，毕竟我们的理想不只是拿一个铜牌💪</p>\n",
            "tags": [
                "生活",
                "竞赛"
            ]
        },
        {
            "id": "http://yoursite.com/boyilun/",
            "url": "http://yoursite.com/boyilun/",
            "title": "博弈论",
            "date_published": "2020-09-24T14:01:26.000Z",
            "content_html": "<p><strong>注意注意注意：</strong> 异或运算符优先级比等于还要低！！！！二进制的运算符尽量都加上括号</p>\n<ol>\n<li>必胜状态后继节点一定有必败</li>\n<li>必败状态后继都是必胜</li>\n</ol>\n<h2 id=\"巴什博弈\"><a class=\"anchor\" href=\"#巴什博弈\">#</a> 巴什博弈</h2>\n<blockquote>\n<p>数上博弈\t<br />\n<strong>俩人轮流取数，一次可以取走 1 到 m 个数，假如有 m+1 个数，则第一个人怎么取第二个人都可以一次取走，</strong><br />\n<strong>第二个人就赢了，现在有 x 个数，这 x 个数可能是 m+1 的倍数，也可能不是，假设不是，那么那么第一个人</strong><br />\n<strong>就可以第一次取 s 个数，把 m+1 这个必败状态给对方，假如是，则自己就是必败了</strong><br />\n <code>x=n*(m+1)+s</code></p>\n</blockquote>\n<h3 id=\"brave-game-hdu1846\"><a class=\"anchor\" href=\"#brave-game-hdu1846\">#</a> Brave game (HDU1846)</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> mod<span class=\"token operator\">=</span>a<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"first\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"second\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"public-sale-hdu2149\"><a class=\"anchor\" href=\"#public-sale-hdu2149\">#</a> Public Sale (HDU2149)</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>b<span class=\"token operator\">>></span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> mod<span class=\"token operator\">=</span>b<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">>=</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>a<span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>mod<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"none\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>图上巴什博弈问题，终结点为必败点，由终结点去推其他店直到推出起点的属性，最后找规律</p>\n<ol>\n<li><strong>只能走到必胜点的是必败点</strong></li>\n<li><strong>可以走到必败点的是必胜点</strong></li>\n</ol>\n<p>** 注意：** 这里的必败必胜表示的是从这个点开始走的属性而不是走到这个点的属性</p>\n</blockquote>\n<h3 id=\"kikis-game-hdu2147\"><a class=\"anchor\" href=\"#kikis-game-hdu2147\">#</a> kiki's game (HDU2147)</h3>\n<p><img data-src=\"https://img-blog.csdn.net/20140429205410484?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSUFjY2VwdGVk/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\" /></p>\n<p>这道题只要 n 或者 m 有一个偶数则起点就是必胜点</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Wonderful!\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"What a pity!\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"斐波那契博弈\"><a class=\"anchor\" href=\"#斐波那契博弈\">#</a> 斐波那契博弈</h2>\n<p>当 n 是一个斐波那契数的时候必胜或者必输，所以对于一道题可以从小推个十来个数，看看必胜或者必输的点如果正好符合斐波那契数列则可以尝试用这种方法</p>\n<h3 id=\"取石子游戏-hdu2516\"><a class=\"anchor\" href=\"#取石子游戏-hdu2516\">#</a> 取石子游戏 (HDU2516)</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> fbi<span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tfbi<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tfbi<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">44</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> fbi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fbi<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>fbi<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意用二分的话必须尺寸必须正好后面不能有 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>fbi<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>fbi<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>fbi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fbi<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>n<span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Second win\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"First win\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"威佐夫博弈\"><a class=\"anchor\" href=\"#威佐夫博弈\">#</a> 威佐夫博弈</h2>\n<p>这个博弈的证明是非常非常复杂的，而且没啥用，所以只需要记住结论会判断哪一个状态是奇异状态，也就是必败状态就可以了</p>\n<p>结论：(判断一个状态是否为奇异状态)</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mo stretchy=\"false\">(</mo><msqrt><mn>5</mn></msqrt><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{(\\sqrt{5}+1)}{2}*(y-x)=x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.27022em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5842200000000002em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p>满足上面等式则该状态是奇异状态</p>\n<h3 id=\"取石子游戏\"><a class=\"anchor\" href=\"#取石子游戏\">#</a> 取石子游戏</h3>\n<p>两堆石子，每次可以从两堆石子取走相等数量的石子，或者从一堆中取走任意数量的石子，谁最后没有石子取谁就输了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bool <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>a<span class=\"token operator\">>></span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"nim游戏\"><a class=\"anchor\" href=\"#nim游戏\">#</a> Nim 游戏</h2>\n<h3 id=\"being-a-good-boy-in-spring-festivalhdu1850\"><a class=\"anchor\" href=\"#being-a-good-boy-in-spring-festivalhdu1850\">#</a> Being a Good Boy in Spring Festival（HDU1850）</h3>\n<p>有 n 堆扑克牌，每堆扑克牌数量为 ai，两个人轮流取，每个人可以取走一堆中任意数量的扑克牌，最后没人有牌取就输了</p>\n<p>典型 nim 游戏，奇异局势为当前剩下的所有扑克牌每一堆的数量的异或等于 0，即</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mn>1</mn><mo>⊕</mo><mi>a</mi><mn>2</mn><mo>⊕</mo><mi>a</mi><mn>3</mn><mo>⊕</mo><mi>a</mi><mn>4...</mn><mo>=</mo><mn>0</mn><mo stretchy=\"false\">(</mo><mi>n</mi><mo>&gt;</mo><mo>=</mo><mi>i</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a1 \\oplus a2 \\oplus a3 \\oplus a4 ...=0(n&gt;=i&gt;=1)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>计算第一步有多少中方式转化为奇异局势，就是用异或和去和 a 数组中每一个数一一进行异或，就相当于减去了这个数，然后判断得数是否小于 a [i]，当小于 a [i] 则表示可以把 a [i] 通过异或转变成为除了这个数以外其他数的异或和，就变成了奇异局势</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1000100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> nim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tcin<span class=\"token operator\">>></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tnim<span class=\"token operator\">^=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nim<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span>nim<span class=\"token operator\">^</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span>cnt<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"sg函数\"><a class=\"anchor\" href=\"#sg函数\">#</a> SG 函数</h2>\n<p><a href=\"https://www.cnblogs.com/DWVictor/p/10235851.html\"><strong>参考文章</strong></a></p>\n<p>所谓 SG 函数其实本质上就是打表，算出每一个点是否为必败情况</p>\n<p>首先定义 mex (minimal excludant) 运算，这是施加于一个集合的运算，表示最小的不属于这个集合的非负整数。例如 mex {0,1,2,4}=3、mex {2,3,5}=0、mex {}=0。</p>\n<p>对于任意状态 x ， 定义 SG (x) = mex (S), 其中 S 是 x 后继状态的 SG 函数值的集合。如 x 有三个后继状态分别为 SG (a),SG (b),SG (c)，那么 SG (x) = mex {SG (a),SG (b),SG (c)}。 这样 集合 S 的终态必然是空集，所以 SG 函数的终态为 SG (x) = 0, 当且仅当 x 为必败点 P 时。</p>\n<p><strong>【实例】取石子问题</strong></p>\n<p>有 1 堆 n 个的石子，每次只能取 {1, 3, 4} 个石子，先取完石子者胜利，那么各个数的 SG 值为多少？</p>\n<p>SG[0]=0，f[]={1,3,4},</p>\n<p>x=1 时，可以取走 1 - f {1} 个石子，剩余 {0} 个，所以 SG [1] = mex { SG [0] }= mex {0} = 1;</p>\n<p>x=2 时，可以取走 2 - f {1} 个石子，剩余 {1} 个，所以 SG [2] = mex { SG [1] }= mex {1} = 0;</p>\n<p>x=3 时，可以取走 3 - f {1,3} 个石子，剩余 {2,0} 个，所以 SG [3] = mex {SG [2],SG [0]} = mex {0,0} =1;</p>\n<p>x=4 时，可以取走 4-  f {1,3,4} 个石子，剩余 {3,1,0} 个，所以 SG [4] = mex {SG [3],SG [1],SG [0]} = mex {1,1,0} = 2;</p>\n<p>x=5 时，可以取走 5 - f {1,3,4} 个石子，剩余 {4,2,1} 个，所以 SG [5] = mex {SG [4],SG [2],SG [1]} =mex {2,0,1} = 3;</p>\n<p>以此类推.....</p>\n<p>x    0 1 2 3 4 5 6 7 8....</p>\n<p>SG[x]  0 1 0 1 2 3 2 0 1....</p>\n<p>由上述实例我们就可以得到 SG 函数值求解步骤，那么计算 1~n 的 SG 函数值步骤如下：</p>\n<p>1、使用 数组 f 将 可改变当前状态 的方式记录下来。</p>\n<p>2、然后我们使用 另一个数组 将当前状态 x 的后继状态标记。</p>\n<p>3、最后模拟 mex 运算，也就是我们在标记值中 搜索 未被标记值 的最小值，将其赋值给 SG (x)。</p>\n<p>4、我们不断的重复 2 - 3 的步骤，就完成了 计算 1~n 的函数值。</p>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//f [N]: 可改变当前状态的方式，N 为方式的种类，f [N] 要在 getSG 之前先预处理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//SG []:0~n 的 SG 函数值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//S []: 为 x 后继状态的集合</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>SG<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>S<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span>  <span class=\"token function\">getSG</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>SG<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 因为 SG [0] 始终等于 0，所以 i 从 1 开始</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 每一次都要将上一状态 的 后继集合 重置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> f<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> i <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> N<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            S<span class=\"token punctuation\">[</span>SG<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>f<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将后继状态的 SG 函数值进行标记</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 查询当前后继状态 SG 值中最小的非零值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            SG<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一道题如果会打 SG 表这道题就做出来了，<s>但是就是打不出来😭</s>，就算空间不够，不能纯打 SG 表也可以根据 SG 表求规律的，给你那么多的数据总不会求不出来巴</p>\n<p>再看一道经典例题：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92anVkZ2UubmV0L2NvbnRlc3QvMzk2NDI4I3Byb2JsZW0vSA==\">Nim or not Nim?</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAXN <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//int sg[MAXN];</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//bool vis[MAXN];</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//void init(int n)&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//\tsg[0]=0;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//\tsg[1]=1;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//\tfor(int i=2;i&lt;=n;i++)&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//\t\tmemset(vis,0,sizeof vis);</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//\t\tfor(int j=1;j&lt;=i;j++)&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//\t\t\tvis[sg[i-j]]=1;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//\t\t\tif(j!=i) vis[sg[i-j]^sg[j]]=1;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//\t\t&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//\t\tfor(int j=0;;j++)&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//\t\t\tif(!vis[j])&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//\t\t\t\tsg[i]=j;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//\t\t\t\tbreak;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//\t\t\t&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//\t\t&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//\t&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">%</span><span class=\"token number\">4</span><span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//    init(100);</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    \t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    \tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    \t<span class=\"token keyword\">int</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tcin<span class=\"token operator\">>></span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tc<span class=\"token operator\">^=</span><span class=\"token function\">sg</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Bob\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Alice\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "博弈论"
            ]
        },
        {
            "id": "http://yoursite.com/BFSPratice/",
            "url": "http://yoursite.com/BFSPratice/",
            "title": "BFS练习",
            "date_published": "2020-07-23T10:12:40.000Z",
            "content_html": "<h2 id=\"a-red-and-black\"><a class=\"anchor\" href=\"#a-red-and-black\">#</a> A - Red and Black</h2>\n<blockquote>\n<p>There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can't move on red tiles, he can move only on black tiles.</p>\n<p>Write a program to count the number of black tiles which he can reach by repeating the moves described above.</p>\n<p><strong>Input</strong></p>\n<p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.</p>\n<p>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.</p>\n<p>'.' - a black tile<br />\n'#' - a red tile<br />\n'@' - a man on a black tile(appears exactly once in a data set)</p>\n<p>The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.</p>\n<p>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.</p>\n<p>'.' - a black tile<br />\n'#' - a red tile<br />\n'@' - a man on a black tile(appears exactly once in a data set)</p>\n<p><strong>Output</strong></p>\n<p>For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself).</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>6 9\n....#.\n.....#\n......\n......\n......\n......\n......\n#@...#\n.#..#.\n11 9\n.#.........\n.#.#######.\n.#.#.....#.\n.#.#.###.#.\n.#.#..@#.#.\n.#.#####.#.\n.#.......#.\n.#########.\n...........\n11 6\n..#..#..#..\n..#..#..#..\n..#..#..###\n..#..#..#@.\n..#..#..#..\n..#..#..#..\n7 7\n..#.#..\n..#.#..\n###.###\n...@...\n###.###\n..#.#..\n..#.#..\n0 0\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>45\n59\n6\n13\n</code></pre>\n</blockquote>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>模板题，没有任何需要注意的地方</p>\n<h3 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> CODE</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PI <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">debug <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"in.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"r\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"out.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"w\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">210</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> eps <span class=\"token operator\">=</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">char</span> Map<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>bool vis<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> dir<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tnode s<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tvis<span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tnode fr<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tcnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tnode next<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>fr<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>x<span class=\"token operator\">></span>n<span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>y<span class=\"token operator\">></span>m<span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tvis<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>m<span class=\"token operator\">>></span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> vis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\tcin<span class=\"token operator\">>></span>Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t\tsx<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t\tsy<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"oop!\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"b-rescue\"><a class=\"anchor\" href=\"#b-rescue\">#</a> B - Rescue</h2>\n<blockquote>\n<p>Angel was caught by the MOLIGPY! He was put in prison by Moligpy. The prison is described as a N * M (N, M &lt;= 200) matrix. There are WALLs, ROADs, and GUARDs in the prison.</p>\n<p>Angel's friends want to save Angel. Their task is: approach Angel. We assume that &quot;approach Angel&quot; is to get to the position where Angel stays. When there's a guard in the grid, we must kill him (or her?) to move into the grid. We assume that we moving up, down, right, left takes us 1 unit time, and killing a guard takes 1 unit time, too. And we are strong enough to kill all the guards.</p>\n<p>You have to calculate the minimal time to approach Angel. (We can move only UP, DOWN, LEFT and RIGHT, to the neighbor grid within bound, of course.)</p>\n<p><strong>Input</strong></p>\n<p>First line contains two integers stand for N and M.</p>\n<p>Then N lines follows, every line has M characters. &quot;.&quot; stands for road, &quot;a&quot; stands for Angel, and &quot;r&quot; stands for each of Angel's friend.</p>\n<p>Process to the end of the file.</p>\n<p><strong>Output</strong></p>\n<p>For each test case, your program should output a single integer, standing for the minimal time needed. If such a number does no exist, you should output a line containing &quot;Poor ANGEL has to stay in the prison all his life.&quot;</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>7 8\n#.#####.\n#.a#..r.\n#..#x...\n..#..#.#\n#...##..\n.#......\n........\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>13\n</code></pre>\n</blockquote>\n<h3 id=\"分析-2\"><a class=\"anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<p>小小的升级，在 x 处步数加一，问到 a 处最少步数，用优先队列就行了，把步数靠前的放前面</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PI <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">debug <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"in.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"r\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"out.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"w\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">210</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> eps <span class=\"token operator\">=</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tbool operator <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span>time<span class=\"token operator\">&lt;</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">char</span> Map<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>bool vis<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> dir<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tnode s<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tpriority_queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tvis<span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tnode fr<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tnode next<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>fr<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>x<span class=\"token operator\">></span>n<span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>y<span class=\"token operator\">></span>m<span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span> next<span class=\"token punctuation\">.</span>time<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> next<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tvis<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">return</span> INF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> vis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\tcin<span class=\"token operator\">>></span>Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t\tsx<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\t\tsy<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">!=</span>INF<span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Poor ANGEL has to stay in the prison all his life.\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"c-battle-city\"><a class=\"anchor\" href=\"#c-battle-city\">#</a> C - Battle City</h2>\n<blockquote>\n<p>Many of us had played the game &quot;Battle city&quot; in our childhood, and some people (like me) even often play it on computer now.</p>\n<p>What we are discussing is a simple edition of this game. Given a map that consists of empty spaces, rivers, steel walls and brick walls only. Your task is to get a bonus as soon as possible suppose that no enemies will disturb you (See the following picture).</p>\n<p>Your tank can't move through rivers or walls, but it can destroy brick walls by shooting. A brick wall will be turned into empty spaces when you hit it, however, if your shot hit a steel wall, there will be no damage to the wall. In each of your turns, you can choose to move to a neighboring (4 directions, not 8) empty space, or shoot in one of the four directions without a move. The shot will go ahead in that direction, until it go out of the map or hit a wall. If the shot hits a brick wall, the wall will disappear (i.e., in this turn). Well, given the description of a map, the positions of your tank and the target, how many turns will you take at least to arrive there?</p>\n<p><strong>Input</strong></p>\n<p>The input consists of several test cases. The first line of each test case contains two integers M and N (2 &lt;= M, N &lt;= 300). Each of the following M lines contains N uppercase letters, each of which is one of 'Y' (you), 'T' (target), 'S' (steel wall), 'B' (brick wall), 'R' (river) and 'E' (empty space). Both 'Y' and 'T' appear only once. A test case of M = N = 0 indicates the end of input, and should not be processed.</p>\n<p><strong>Output</strong></p>\n<p>For each test case, please output the turns you take at least in a separate line. If you can't arrive at the target, output &quot;-1&quot; instead.</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>3 4\nYBEB\nEERE\nSSTE\n0 0\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>8\n</code></pre>\n</blockquote>\n<h3 id=\"分析-3\"><a class=\"anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<p>经典坦克大战，R (河流) S (钢铁) 过不去，B (砖块) 可以过去但是需要多花一秒，于是这个和上一道就是一道题了，只不过多了一条河不能过而已</p>\n<h3 id=\"code-2\"><a class=\"anchor\" href=\"#code-2\">#</a> CODE</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PI <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">debug <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"in.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"r\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"out.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"w\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">410</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> eps <span class=\"token operator\">=</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tbool operator <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span>time<span class=\"token operator\">&lt;</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">char</span> Map<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>bool vis<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> dir<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tnode s<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tpriority_queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tvis<span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tnode fr<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tnode next<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>fr<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>x<span class=\"token operator\">></span>n<span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>y<span class=\"token operator\">></span>m<span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'S'</span><span class=\"token operator\">||</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'R'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span> next<span class=\"token punctuation\">.</span>time<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'T'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> next<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tvis<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>m<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> vis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\tcin<span class=\"token operator\">>></span>Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\t\tsx<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t\tsy<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dungeon-master\"><a class=\"anchor\" href=\"#dungeon-master\">#</a> Dungeon Master</h2>\n<blockquote>\n<p>You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides.</p>\n<p>Is an escape possible? If yes, how long will it take?</p>\n<p><strong>Input</strong></p>\n<p>The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size).<br />\nL is the number of levels making up the dungeon.<br />\nR and C are the number of rows and columns making up the plan of each level.<br />\nThen there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a '#' and empty cells are represented by a '.'. Your starting position is indicated by 'S' and the exit by the letter 'E'. There's a single blank line after each level. Input is terminated by three zeroes for L, R and C.</p>\n<p><strong>Output</strong></p>\n<p>Each maze generates one line of output. If it is possible to reach the exit, print a line of the form</p>\n<p>​\tEscaped in x minute(s).</p>\n<p>where x is replaced by the shortest time it takes to escape.<br />\nIf it is not possible to escape, print the line</p>\n<p>​\tTrapped!</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>3 4 5\nS....\n.###.\n.##..\n###.#\n\n#####\n#####\n##.##\n##...\n\n#####\n#####\n#.###\n####E\n\n1 3 3\nS##\n#E#\n###\n\n0 0 0\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>Escaped in 11 minute(s).\nTrapped!\n</code></pre>\n</blockquote>\n<h3 id=\"分析-4\"><a class=\"anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<p>这个题有点意思，是一个三维空间的 BFS，一维二维都会了，三维自然是手到擒来了，按着模板写，添加一维就行了</p>\n<h3 id=\"code-3\"><a class=\"anchor\" href=\"#code-3\">#</a> CODE</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">PI <span class=\"token function\">acos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">debug <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"in.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"r\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"out.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"w\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> eps <span class=\"token operator\">=</span> <span class=\"token number\">1e-5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">char</span> Map<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>bool vis<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> dir<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>bool <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>node next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>x<span class=\"token operator\">></span>n<span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>y<span class=\"token operator\">></span>m<span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>z<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>next<span class=\"token punctuation\">.</span>z<span class=\"token operator\">></span>l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sx<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sy<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tnode s<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span>sz<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tvis<span class=\"token punctuation\">[</span>sz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sy<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tnode fr<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tnode next<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>fr<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>z<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fr<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">||</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> next<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tvis<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//\tios;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>l<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>m<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> vis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span>sz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span>l<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t\tcin<span class=\"token operator\">>></span>Map<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t\t\tsx<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t\t\tsy<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\t\t\tsz<span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span>sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Escaped in \"</span><span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" minute(s).\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Trapped!\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"catch-that-cow\"><a class=\"anchor\" href=\"#catch-that-cow\">#</a> Catch That Cow</h2>\n<blockquote>\n<p>Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point <em>N</em> (0 ≤ <em>N</em> ≤ 100,000) on a number line and the cow is at a point <em>K</em> (0 ≤ <em>K</em> ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.</p>\n<p>* Walking: FJ can move from any point <em>X</em> to the points <em>X</em> - 1 or <em>X</em> + 1 in a single minute<br />\n* Teleporting: FJ can move from any point <em>X</em> to the point 2 × <em>X</em> in a single minute.</p>\n<p>If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?</p>\n<p><strong>Input</strong></p>\n<p>Line 1: Two space-separated integers: <em>N</em> and <em>K</em></p>\n<p><strong>Output</strong></p>\n<p>Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>5 17\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>4\n</code></pre>\n</blockquote>\n<h3 id=\"分析-5\"><a class=\"anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<p>毒瘤的一道题目，没什么难度，就是感觉评测机器有问题，同样两段代码，放到函数和写在 main 函数里面不一样的结果。。。不信你可以试试</p>\n<h3 id=\"code-4\"><a class=\"anchor\" href=\"#code-4\">#</a> CODE</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> vis<span class=\"token punctuation\">[</span><span class=\"token number\">1000001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> wei<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tnode start<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tvis<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tnode tmp<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span>wei<span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>tmp<span class=\"token punctuation\">.</span>time<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tnode nx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> nx<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>tmp<span class=\"token punctuation\">.</span>wei<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> nx<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>tmp<span class=\"token punctuation\">.</span>wei<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> nx<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>tmp<span class=\"token punctuation\">.</span>wei<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">.</span>time<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">.</span>wei<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>nx<span class=\"token punctuation\">.</span>wei<span class=\"token operator\">></span><span class=\"token number\">100000</span><span class=\"token operator\">||</span>vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">.</span>wei<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tvis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">.</span>wei<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"number-transformation\"><a class=\"anchor\" href=\"#number-transformation\">#</a> Number Transformation</h2>\n<blockquote>\n<p>In this problem, you are given an integer number <strong>s</strong>. You can transform any integer number <strong>A</strong> to another integer number <strong>B</strong> by adding <strong>x</strong> to <strong>A</strong>. This <strong>x</strong> is an integer number which is a prime factor of <strong>A</strong> (please note that 1 and <strong>A</strong> are not being considered as a factor of <strong>A</strong>). Now, your task is to find the minimum number of transformations required to transform <strong>s</strong> to another integer number <strong>t</strong>.</p>\n<p><strong>Input</strong></p>\n<p>Input starts with an integer <strong>T (****≤ 500)</strong>, denoting the number of test cases.</p>\n<p>Each case contains two integers: <strong>s (1 ≤ s ≤ 100)</strong> and <strong>t (1 ≤ t ≤ 1000)</strong>.</p>\n<p><strong>Output</strong></p>\n<p>For each case, print the case number and the minimum number of transformations needed. If it's impossible, then print <strong>-1</strong>.</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>2\n\n6 12\n\n6 13\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>Case 1: 2\n\nCase 2: -1\n</code></pre>\n</blockquote>\n<h3 id=\"分析-6\"><a class=\"anchor\" href=\"#分析-6\">#</a> 分析</h3>\n<p>有意思的一道题目，给你两个数 a 和 b，让你不断通过加 a 的质因子直到和 b 相等，有意思在哪里？这个质因子不是不变的，当 a 改变后，a 的质因子也会发生改变，所以有两种做法，一个是每次增加都进行一次质因子分解，这也是很快的，根本不会超时，1000 以内的任何一个数的质因子数量都是不超过 10 个的，第二种是开一个二维数组，打一个表，因为这里的 b 是小于 1000 的，我们可以开这么大的数组，存储某一个数的质因子，这里用了第二种做法，其实题目也不难，就是题目难以理解</p>\n<h3 id=\"code-5\"><a class=\"anchor\" href=\"#code-5\">#</a> CODE</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;math.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAX<span class=\"token operator\">=</span><span class=\"token number\">1e3</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF<span class=\"token operator\">=</span><span class=\"token number\">0x3f3f3f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> vis<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vt<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>bool <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token operator\">||</span>n<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>n<span class=\"token operator\">%</span><span class=\"token number\">6</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>n<span class=\"token operator\">%</span><span class=\"token number\">6</span><span class=\"token operator\">!=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">*</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">||</span>n<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">prime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>MAX<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> vt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tqueue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tvis<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tnode start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tstart<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span> start<span class=\"token punctuation\">.</span>step<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tnode tmp<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span>x<span class=\"token operator\">==</span>t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>vt<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tnode nx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tnx<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>vt<span class=\"token punctuation\">[</span>tmp<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tnx<span class=\"token punctuation\">.</span>step<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">.</span>x<span class=\"token operator\">></span>t<span class=\"token operator\">||</span>vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tvis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tq<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">prime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tcin<span class=\"token operator\">>></span>T<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">int</span> kase<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span>INF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tans<span class=\"token operator\">=</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Case %d: %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">++</span>kase<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"g-knight-moves\"><a class=\"anchor\" href=\"#g-knight-moves\">#</a> G - Knight Moves</h2>\n<blockquote>\n<p>A friend of you is doing research on the Traveling Knight Problem (TKP) where you are to find the shortest closed tour of knight moves that visits each square of a given set of n squares on a chessboard exactly once. He thinks that the most difficult part of the problem is determining the smallest number of knight moves between two given squares and that, once you have accomplished this, finding the tour would be easy.<br />\nOf course you know that it is vice versa. So you offer him to write a program that solves the &quot;difficult&quot; part.</p>\n<p>Your job is to write a program that takes two squares a and b as input and then determines the number of knight moves on a shortest route from a to b.</p>\n<p><strong>Input</strong></p>\n<p>The input file will contain one or more test cases. Each test case consists of one line containing two squares separated by one space. A square is a string consisting of a letter (a-h) representing the column and a digit (1-8) representing the row on the chessboard.</p>\n<p><strong>Output</strong></p>\n<p>For each test case, print one line saying &quot;To get from xx to yy takes n knight moves.&quot;.</p>\n<p><strong>Sample Input</strong></p>\n<pre><code>e2 e4\na1 b2\nb2 c3\na1 h8\na1 h7\nh8 a1\nb1 c3\nf6 f6\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code>To get from e2 to e4 takes 2 knight moves.\nTo get from a1 to b2 takes 4 knight moves.\nTo get from b2 to c3 takes 2 knight moves.\nTo get from a1 to h8 takes 6 knight moves.\nTo get from a1 to h7 takes 5 knight moves.\nTo get from h8 to a1 takes 6 knight moves.\nTo get from b1 to c3 takes 1 knight moves.\nTo get from f6 to f6 takes 0 knight moves.\n</code></pre>\n</blockquote>\n<h3 id=\"分析-7\"><a class=\"anchor\" href=\"#分析-7\">#</a> 分析</h3>\n<p>只是把上下左右换成了马的走法而已</p>\n<h3 id=\"code-6\"><a class=\"anchor\" href=\"#code-6\">#</a> CODE</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> ch1<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ch2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> vis<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> dir<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span>node<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    node s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    s<span class=\"token punctuation\">.</span>row<span class=\"token operator\">=</span>ch1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    s<span class=\"token punctuation\">.</span>col<span class=\"token operator\">=</span>ch1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    s<span class=\"token punctuation\">.</span>step<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    vis<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        node tmp<span class=\"token operator\">=</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span>row<span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>ch2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>tmp<span class=\"token punctuation\">.</span>col<span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>ch2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">&lt;</span>ans<span class=\"token punctuation\">)</span> ans<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           \tnode nx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    \t\tnx<span class=\"token punctuation\">.</span>row<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">.</span>row<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    \t\tnx<span class=\"token punctuation\">.</span>col<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">.</span>col<span class=\"token operator\">+</span>dir<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>nx<span class=\"token punctuation\">.</span>row<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>nx<span class=\"token punctuation\">.</span>row<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token operator\">&amp;&amp;</span>nx<span class=\"token punctuation\">.</span>col<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>nx<span class=\"token punctuation\">.</span>col<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t            vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">.</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t            nx<span class=\"token punctuation\">.</span>step<span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">.</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t            q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        \t<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>ch1<span class=\"token operator\">>></span>ch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        ans<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t    <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"To get from \"</span><span class=\"token operator\">&lt;&lt;</span>ch1<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" to \"</span><span class=\"token operator\">&lt;&lt;</span>ch2<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" takes \"</span><span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" knight moves.\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"噩梦\"><a class=\"anchor\" href=\"#噩梦\">#</a> 噩梦</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvZGVzY3JpcHRpb24vMTc5Lw==\">题目链接</span></p>\n<blockquote>\n<p>给定一张 N*M 的地图，地图中有 1 个男孩，1 个女孩和 2 个鬼。</p>\n<p>字符 “.” 表示道路，字符 “X” 表示墙，字符 “M” 表示男孩的位置，字符 “G” 表示女孩的位置，字符 “Z” 表示鬼的位置。</p>\n<p>男孩每秒可以移动 3 个单位距离，女孩每秒可以移动 1 个单位距离，男孩和女孩只能朝上下左右四个方向移动。</p>\n<p>每个鬼占据的区域每秒可以向四周扩张 2 个单位距离，并且无视墙的阻挡，也就是在第 k 秒后所有与鬼的曼哈顿距离不超过 2k 的位置都会被鬼占领。</p>\n<p><strong>注意：</strong> 每一秒鬼会先扩展，扩展完毕后男孩和女孩才可以移动。</p>\n<p>求在不进入鬼的占领区的前提下，男孩和女孩能否会合，若能会合，求出最短会合时间。</p>\n<h4 id=\"输入格式\"><a class=\"anchor\" href=\"#输入格式\">#</a> 输入格式</h4>\n<p>第一行包含整数 T，表示共有 T 组测试用例。</p>\n<p>每组测试用例第一行包含两个整数 N 和 M，表示地图的尺寸。</p>\n<p>接下来 N 行每行 M 个字符，用来描绘整张地图的状况。（注意：地图中一定有且仅有 1 个男孩，1 个女孩和 2 个鬼）</p>\n<h4 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> 输出格式</h4>\n<p>每个测试用例输出一个整数 S，表示最短会合时间。</p>\n<p>如果无法会合则输出 - 1。</p>\n<p>每个结果占一行。</p>\n<h4 id=\"数据范围\"><a class=\"anchor\" href=\"#数据范围\">#</a> 数据范围</h4>\n<p>1&lt;n,m&lt;8001&lt;n,m&lt;800</p>\n<h4 id=\"输入样例\"><a class=\"anchor\" href=\"#输入样例\">#</a> 输入样例：</h4>\n<pre><code>3\n5 6\nXXXXXX\nXZ..ZX\nXXXXXX\nM.G...\n......\n5 6\nXXXXXX\nXZZ..X\nXXXXXX\nM.....\n..G...\n10 10\n..........\n..X.......\n..M.X...X.\nX.........\n.X..X.X.X.\n.........X\n..XX....X.\nX....G...X\n...ZX.X...\n...Z..X..X\n</code></pre>\n<h4 id=\"输出样例\"><a class=\"anchor\" href=\"#输出样例\">#</a> 输出样例：</h4>\n<pre><code>1\n1\n-1\n</code></pre>\n</blockquote>\n<h3 id=\"分析-8\"><a class=\"anchor\" href=\"#分析-8\">#</a> 分析</h3>\n<p>双向 BFS，男孩和女孩轮流 BFS，直到两者轨迹有交叉</p>\n<h3 id=\"code-7\"><a class=\"anchor\" href=\"#code-7\">#</a> CODE</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">810</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pii boy<span class=\"token punctuation\">,</span>girl<span class=\"token punctuation\">,</span>ghost<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> vis<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">char</span> g<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bool <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>x<span class=\"token operator\">></span>n<span class=\"token operator\">||</span>y<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>y<span class=\"token operator\">></span>m<span class=\"token operator\">||</span>g<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>ghost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>ghost<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">></span> qb<span class=\"token punctuation\">,</span>qg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    qb<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> qg<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>girl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> step<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>qb<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token operator\">!</span>qg<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \tstep<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    \t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">=</span>qb<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    \t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>qb<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \t\t\t<span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span>qb<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t\t\tqb<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    \t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    \t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    \t\t\t\t<span class=\"token keyword\">int</span> nx<span class=\"token operator\">=</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    \t\t\t\t<span class=\"token keyword\">int</span> ny<span class=\"token operator\">=</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    \t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span>ny<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    \t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    \t\t\t\t\tvis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    \t\t\t\t\tqb<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>nx<span class=\"token punctuation\">,</span>ny<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">=</span>qg<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>qg<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span>qg<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\tqg<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">int</span> nx<span class=\"token operator\">=</span>x<span class=\"token operator\">+</span>dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">int</span> ny<span class=\"token operator\">=</span>y<span class=\"token operator\">+</span>dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span>ny<span class=\"token punctuation\">,</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t\t\tvis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t\t\tqg<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>nx<span class=\"token punctuation\">,</span>ny<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> vis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> cnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\tcin<span class=\"token operator\">>></span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span> boy<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span> girl<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span> ghost<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "题目",
                "BFS"
            ]
        },
        {
            "id": "http://yoursite.com/backpack/",
            "url": "http://yoursite.com/backpack/",
            "title": "浅谈01背包和完全背包",
            "date_published": "2020-07-07T11:21:27.000Z",
            "content_html": "<blockquote>\n<p>今天做了查并集和 01 背包结合的一道题，致使我对背包开始了学习</p>\n</blockquote>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>背包问题属于动态规划里面的一大块内容，包括九讲，本文主要讲 01 背包和完全背包</p>\n<p>两个背包差别在于 01 背包每一个物品只能选一次，完全背包则可以选无限次，只要背包容积足够</p>\n<h2 id=\"01背包\"><a class=\"anchor\" href=\"#01背包\">#</a> 01 背包</h2>\n<p><strong>结合题目进行讲解</strong></p>\n<p>01 背包问题</p>\n<p>有 NN 件物品和一个容量是 VV 的背包。每件物品只能使用一次。</p>\n<p>第 ii 件物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br />\n输出最大价值。</p>\n<h3 id=\"输入格式\"><a class=\"anchor\" href=\"#输入格式\">#</a> 输入格式</h3>\n<p>第一行两个整数，N，VN，V，用空格隔开，分别表示物品数量和背包容积。</p>\n<p>接下来有 NN 行，每行两个整数 vi,wi，用空格隔开，分别表示第 ii 件物品的体积和价值。</p>\n<h3 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> 输出格式</h3>\n<p>输出一个整数，表示最大价值。</p>\n<h3 id=\"数据范围\"><a class=\"anchor\" href=\"#数据范围\">#</a> 数据范围</h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>N</mi><mo separator=\"true\">,</mo><mi>V</mi><mo>≤</mo><mn>10000</mn><mo>&lt;</mo><mi>v</mi><mi>i</mi><mo separator=\"true\">,</mo><mi>w</mi><mi>i</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">0&lt;N,V≤1000\n0&lt;vi,wi≤1000\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span></span></p>\n<h3 id=\"输入样例\"><a class=\"anchor\" href=\"#输入样例\">#</a> 输入样例</h3>\n<pre><code>4 5\n1 2\n2 4\n3 4\n4 5\n</code></pre>\n<h3 id=\"输出样例\"><a class=\"anchor\" href=\"#输出样例\">#</a> 输出样例：</h3>\n<pre><code>8\n</code></pre>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>这是一道 01 背包模板题</p>\n<p>首先从二维开始，我们用 dp [i] [j] 表示前 i 个物品当体积为 j 时最大收益，那么 <code>dp[0][j]</code>  和 <code>dp[i][0]</code>  就都为 0，分别对应二维数组的第一行和第一列，接下来就从这两列一步一步往最后推，当碰到第 i 个物品，我们有两个选择，选或者不选，假若背包装不下，那么不选， <code>dp[i][j]=dp[i-1][j]</code> ，假若能装下，应该考虑装它是否能使利益最大化，所以应该在装和不装之间取大的， <code>dp[i][j]=max(dp[i-1][j],dp[i-1][j-w[i]]+v[i])</code> ，注意这里装不一定比不装收益高，因为可能前几件价值大，第 i 件价值小，选择了第 i 件就舍弃了前面价值大的。</p>\n<p>详细分析<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NzY3NDU1L2FydGljbGUvZGV0YWlscy85OTA4NjY3OA==\">点击我</span></p>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">debug <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"in.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"r\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"out.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"w\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">1e3</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cin<span class=\"token operator\">>></span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>></span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>v<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    \t\t<span class=\"token keyword\">else</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 两种写法都一样</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    \t    <span class=\"token comment\">//dp[i][j]=dp[i-1][j];</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    \t\t<span class=\"token comment\">//if(j>=c[i]) dp[i][j]=max(dp[i][j],dp[i-1][j-c[i]]+w[i]);            </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"降维\"><a class=\"anchor\" href=\"#降维\">#</a> 降维</h3>\n<p>这个时间复杂的是 O (NV) 的，已经是最优了，但是空间还可以优化，观察上面的递推公式，当前前 i 个物品的状态只与前 i-1 个物品的状态有关，也就是在图上只与正上方和左上方有关，而这两个状态是已知的，因此可以用滚动数组从前往后推，也可以用一维数组从后往前推 ( <code>必须从后往前推，否则前一次循环保存下来的值将会被修改，从而造成推后面时用的值发生改变</code> )</p>\n<h3 id=\"代码-2\"><a class=\"anchor\" href=\"#代码-2\">#</a> 代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">debug <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"in.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"r\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"out.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"w\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">1e3</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cin<span class=\"token operator\">>></span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>></span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t   dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"完全背包\"><a class=\"anchor\" href=\"#完全背包\">#</a> 完全背包</h2>\n<p>完全背包其实和 01 背包是超级相似的</p>\n<p>其公式的推导可见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS92aWRlby85NDUv\">闫式 DP 分析法</span>，利用数学公式直接推出完全背包公式： <code>dp[i][j]=max(dp[i-1][j],dp[i][j-w[i]]+v[i])</code> ，这个公式和 01 背包只有最后 max 第二部分的 i-1 换成了 i，当降维后，01 背包和完全背包就只有一个差别，倒着推和正着推😂</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">ios ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">debug <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"in.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"r\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"out.txt\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"w\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e3</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cin<span class=\"token operator\">>></span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>></span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>v<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "背包"
            ]
        },
        {
            "id": "http://yoursite.com/CSSyufa/",
            "url": "http://yoursite.com/CSSyufa/",
            "title": "CSS语法笔记",
            "date_published": "2020-06-28T10:36:47.000Z",
            "content_html": "<blockquote>\n<p>对 Web 有点兴趣，可能它是可视化的，给我带来的成就感更多吧🐷标签不记了，w3school 上都有</p>\n</blockquote>\n<h2 id=\"文章转载\"><a class=\"anchor\" href=\"#文章转载\">#</a> 文章转载</h2>\n<p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW50bW9lLmNvbS9wb3N0cy9mZDFjOGY3NS9pbmRleC5odG1s\">Click me</span><br />\n 本人也对其做了少些修改</p>\n<h2 id=\"元素\"><a class=\"anchor\" href=\"#元素\">#</a> 元素</h2>\n<p>CSS 元素分为 <code>块、行、行内块</code> 三种元素，块元素会独占一行、行元素会紧凑着排列、而行内块就是综合两者在行内排列着块。<br />\n&lt;ul&gt;<br />\n 行内元素特征：&lt;br&gt;<br />\n&lt;li&gt; 设置宽高无效 &lt;/li&gt;<br />\n&lt;li&gt; 对 margin 仅设置左右方向有效，上下无效；padding 设置上下左右都有效，即会撑大空间，行内元素尺寸，由内含的内容决定，盒模型中 padding, border 与块级元素并无差异，都是标准的盒模型，但是 margin，却只有水平方向的值，垂直方向并没有起作用。行内元素的水平方向的 padding-left,padding-right,margin-left,margin-right 都产生边距效果，但是竖直方向的 padding-top,padding-bottom,margin-top,margin-bottom 都不会产生边距效果。padding 设置上下左右都有效，即会撑大空间但是 &lt; em &gt; 不会产生边距效果 &lt;/em&gt;。&lt;/li&gt;<br />\n&lt;li&gt; 不会自动进行换行 &lt;/li&gt;<br />\n&lt;br&gt;&lt;br&gt;<br />\n 块状元素特征: &lt;br&gt;<br />\n&lt;li&gt; 能够识别宽高 &lt;/li&gt;<br />\n&lt;li&gt;margin 和 padding 的上下左右均对其有效 &lt;/li&gt;<br />\n&lt;li&gt; 可以自动换行 &lt;/li&gt;<br />\n&lt;li&gt; 多个块状元素标签写在一起，默认排列方式为从上至下 &lt;/li&gt;<br />\n&lt;br&gt;&lt;br&gt;<br />\n 行内块状元素特征: &lt;br&gt;<br />\n&lt;li&gt; 不自动换行 &lt;/li&gt;<br />\n&lt;li&gt; 能够识别宽高 &lt;/li&gt;<br />\n&lt;li&gt; 默认排列方式为从左到右 &lt;/li&gt;<br />\n&lt;/ul&gt;</p>\n<p>以上三种元素可以通过 <code>display: ???</code>  属性切换类型。</p>\n<h2 id=\"选择器分类\"><a class=\"anchor\" href=\"#选择器分类\">#</a> 选择器分类</h2>\n<ul>\n<li>基本选择器：共有 5 个基本选择器，是 CSS 选择器的最为基本的用法。</li>\n<li>层级选择器：共有 4 个层级选择器。</li>\n<li>组合选择器：具有交集和并集两种用法，是将之前基本选择器和层级选择器进行组合。</li>\n<li>伪类选择器：允许未包含在 HTML 页面中的状态信息选定位 HTML 元素。</li>\n<li>伪元素选择器：定位所有未被包含 HTML 的实体。</li>\n</ul>\n<h2 id=\"基本选择器\"><a class=\"anchor\" href=\"#基本选择器\">#</a> 基本选择器</h2>\n<ol>\n<li>\n<p>类型选择器（元素选择器）</p>\n<pre><code>div &#123;\n     font: 12px;\n    &#125;\n</code></pre>\n</li>\n<li>\n<p>类（Class）选择器<br />\n类选择器前面是 “.”，类名对应 HTML 中的 class 类</p>\n<pre><code>.demo &#123;\n   color: lightcoral;\n   font-size: 24px;\n &#125;\n</code></pre>\n</li>\n<li>\n<p>ID 选择器<br />\n id 选择器前面是 “#”， <code>一个 html 文件中 id 只允许出现一次</code> <br />\n <code>    #Demo &#123;       color: lightcoral;       font-size: 24px;     &#125;    </code></p>\n</li>\n<li>\n<p>通配符 “*”，为 HTML 中所有元素添加样式<br />\n <code>    * &#123;       color: lightcoral;     &#125;    </code></p>\n</li>\n<li>\n<p>属性选择器</p>\n<ul>\n<li>[attr] 属性选择器：通过 HTML 元素的 attr 属性名来定位具体 HTML 元素，把所有 title 属性的元素全部改变。<pre><code>[title] &#123;\n    color=&quot;red&quot;;\n&#125;\n</code></pre>\n</li>\n<li>[标签][属性]：将所有特定标签加油特定属性的元素添加样式<pre><code>a[href] &#123;color:red;&#125; //对所有加有href的a标签添加样式\n</code></pre>\n</li>\n<li>[标签][属性 1][属性 2][...]：将同时加有属性 1、属性 2... 的特定标签添加样式<pre><code>a[href][title]  &#123;color:red;&#125;\n</code></pre>\n</li>\n<li>根据具体属性值选择<br />\n除了选择拥有某些属性的元素，还可以进一步缩小选择范围，只选择有特定属性值的元素。<pre><code>a[href=&quot;http://www.w3school.com.cn/about_us.asp&quot;] &#123;color: red;&#125;\n</code></pre>\n</li>\n<li>根据多个具体属性选择<pre><code>a[href=&quot;http://www.w3school.com.cn/&quot;][title=&quot;W3School&quot;] &#123;color: red;&#125;\n</code></pre>\n</li>\n<li>选择 titile 属性包含单词 &quot;flower&quot; 的元素，并设置其样式：<pre><code>[title~=flower]\n&#123; \n    background-color:yellow;\n&#125;\n&lt;p title=&quot;flower nb&quot;&gt;添加成功&lt;/p&gt;\n&lt;p title=&quot;nb&quot;&gt;添加失败&lt;/p&gt;\n</code></pre>\n</li>\n<li>选择 lang 属性值以 &quot;en&quot; 开头的元素，并设置其样式：<pre><code>[lang|=en]\n&#123; \nbackground-color:yellow;\n&#125;\n</code></pre>\n</li>\n<li>设置 class 属性值以 &quot;test&quot; 开头的所有 div 元素的背景色：<pre><code>div[class^=&quot;test&quot;]\n&#123;\nbackground:#ffff00;\n&#125;\n</code></pre>\n</li>\n<li>设置 class 属性值以 &quot;test&quot; 结尾的所有 div 元素的背景色：<pre><code>div[class$=&quot;test&quot;]\n&#123;\n    background:#ffff00;\n&#125;\n</code></pre>\n</li>\n<li>设置 class 属性值包含 &quot;test&quot; 的所有 div 元素的背景色：<pre><code>div[class*=&quot;test&quot;]\n&#123;\n    background:#ffff00;\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"优先级\"><a class=\"anchor\" href=\"#优先级\">#</a> 优先级</h2>\n<blockquote>\n<p>优先级就是分配给指定的 CSS 声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。</p>\n</blockquote>\n<p>例如：a.name 权重等于 a 标签权重加上 name 类名的权重和，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS02a3FyNGUxeWoxd3B6ZjRjLm5hbWU=\">其权重大于.name</span>，所以两者同时存在时前者样式生效</p>\n<p>&lt;font color=&quot;red&quot; size=3&gt; 权重相同，&lt;b &gt; 后来者居上 &lt;/b&gt;&lt;/font&gt;</p>\n<p>&lt;font size=4&gt;!important 提高到最高优先级 &lt;/font&gt;</p>\n<pre><code>    div &#123;\n      color: blue !important;\n    &#125;\n    .demo &#123;\n      color: red;\n    &#125;\n    &lt;div class=&quot;demo&quot;&gt;这是一个测试内容.&lt;/div&gt; //最终的颜色为 blue\n</code></pre>\n<h2 id=\"层级选择器\"><a class=\"anchor\" href=\"#层级选择器\">#</a> 层级选择器</h2>\n<h3 id=\"层级选择器-2\"><a class=\"anchor\" href=\"#层级选择器-2\">#</a> 层级选择器</h3>\n<pre><code>  &lt;div id=&quot;ancestor1&quot;&gt;\n    &lt;div id=&quot;parent1&quot;&gt;\n      &lt;div id=&quot;child11&quot;&gt;&lt;/div&gt;\n      &lt;div id=&quot;child12&quot;&gt;&lt;/div&gt; \n\n    &lt;/div&gt;\n    &lt;div id=&quot;parent2&quot;&gt;\n      &lt;div id=&quot;child2&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div id=&quot;ancestor2&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/832afe33ly1gainbqrpuuj21jj0qi763.jpg\" alt=\"\" /></p>\n<ul>\n<li>兄弟元素：ancestor1 元素和 ancestor2 元素、parent1 元素和 parent2 元素，以及 child11 元素和 child12 元素。</li>\n<li>父级与子级元素：\n<ul>\n<li>如果 `` 元素是父级元素的话，那 ancestor1 元素和 ancestor2 元素就是子级元素。</li>\n<li>如果 ancestor1 元素是父级元素的话，那 parent1 元素和 parent2 元素就是子级元素。</li>\n<li>如果 parent1 元素是父级元素的话，那 child11 元素和 child12 元素就是子级元素。</li>\n</ul>\n</li>\n<li>祖先与后代元素：\n<ul>\n<li>如果 `` 元素是祖先元素的话，那其包含的所有元素都是后代元素。</li>\n<li>如果 ancestor1 元素是祖先元素的话，那其包含的所有元素都是后代元素。</li>\n<li>如果 parent1 元素是祖先元素的话，那其包含的所有元素都是后代元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"层级选择器种类\"><a class=\"anchor\" href=\"#层级选择器种类\">#</a> 层级选择器种类</h3>\n<ul>\n<li>后代选择器<br />\n简单来说，该元素的所有后代元素。</li>\n</ul>\n<pre><code>div span &#123;\n      background-color: lightcoral;\n    &#125;\n&lt;div&gt;\n    &lt;span&gt;Span 1.\n      &lt;span&gt;Span 2.&lt;/span&gt;\n    &lt;/span&gt;\n  &lt;/div&gt;\n&lt;span&gt;Span 3.&lt;/span&gt;\n\n这样只会影响到div里的span标签，而div外的标签则不会受到影响\n</code></pre>\n<ul>\n<li>子级选择器<br />\n定位该元素的所有子级元素。并不会影响孙子级元素</li>\n</ul>\n<pre><code>&lt;style&gt;\nspan&#123;\n\tcolor: teal;\n&#125;\ndiv&gt;span&#123;\n\tcolor: violet;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ul>\n<li>相邻兄弟选择器<br />\n定位与该目标元素拥有同一个父级元素的<strong>下一个</strong>指定元素 &lt;font color=&quot;red&quot;&gt; 不包括当前元素，只包括后边的元素 &lt;/font&gt;</li>\n</ul>\n<pre><code>    &lt;style&gt;\n    #a+li&#123;\n        color: red;\n    &#125;\n    &lt;/style&gt;\n    &lt;ul&gt;\n        &lt;li id=&quot;a&quot;&gt;1sadsada&lt;/li&gt; &lt;!-- 不会变色 --&gt;\n        &lt;li&gt;555555&lt;/li&gt;&lt;!-- 变色 --&gt;\n    &lt;/ul&gt;\n</code></pre>\n<ul>\n<li>普通兄弟选择器<br />\n简单来说就是 p~codep 元素之后的元素</li>\n</ul>\n<p>定位与该目标元素拥有同一个父级元素的之后任意指定元素</p>\n<pre><code>  &lt;style&gt;\n    span &#123;\n      background-color: lightgreen;\n    &#125;\n\n    p~code &#123;\n      background-color: lightcoral;\n    &#125;\n  &lt;/style&gt;\n  &lt;span&gt;This is not red.&lt;/span&gt;\n  &lt;p&gt;Here is a paragraph.&lt;/p&gt;\n  &lt;code&gt;Here is some code.&lt;/code&gt; 会变色\n  &lt;span&gt;And here is a span.&lt;/span&gt;\n</code></pre>\n<h2 id=\"组合选择器\"><a class=\"anchor\" href=\"#组合选择器\">#</a> 组合选择器</h2>\n<h3 id=\"组合并集选择器\"><a class=\"anchor\" href=\"#组合并集选择器\">#</a> 组合（并集）选择器</h3>\n<p><code>h1, h2, h3, h4, h5, h6 &#123; color:blue; &#125;</code>  同时定义多个标签的属性。</p>\n<h3 id=\"组合交集选择器\"><a class=\"anchor\" href=\"#组合交集选择器\">#</a> 组合（交集）选择器</h3>\n<pre><code>p.cls &#123;\n    color: blueviolet;\n&#125;\n表示把所有class名为cls的p标签都设置成blueviolet颜色\n</code></pre>\n<h2 id=\"伪类选择器\"><a class=\"anchor\" href=\"#伪类选择器\">#</a> 伪类选择器</h2>\n<pre><code>/* 所有用户指针悬停的按钮 */\nbutton:hover &#123;\n  color: blue;\n&#125;\n</code></pre>\n<h3 id=\"否定伪类选择器\"><a class=\"anchor\" href=\"#否定伪类选择器\">#</a> 否定伪类选择器</h3>\n<blockquote>\n<p>:not(selector) {<br />\n属性：属性值；<br />\n}</p>\n</blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;title&gt;否定伪类选择器&lt;/title&gt;\n  &lt;style&gt;\n    .fancy &#123;\n      text-shadow: 2px 2px 3px gold;\n    &#125;\n\n    p:not(.fancy) &#123; /*匹配class名不是fancy的p标签*/\n      color: green;\n    &#125;\n\n    body :not(p) &#123; /*匹配body中不是p标签的标签*/\n      text-decoration: underline;\n    &#125;\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;p&gt;我是一个段落。&lt;/p&gt;\n  &lt;p class=&quot;fancy&quot;&gt;我好看极了！&lt;/p&gt;\n  &lt;div&gt;我不是一个段落。&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"伪元素选择器\"><a class=\"anchor\" href=\"#伪元素选择器\">#</a> 伪元素选择器</h2>\n<pre><code>/* CSS3 语法 */\n选择器::伪元素 &#123;\n  属性 : 属性值;\n&#125;\n/* CSS2 过时语法 (仅用来支持 IE8) */\n选择器:伪元素 &#123;\n  属性 : 属性值;\n&#125;\n</code></pre>\n<p>&lt;b&gt; 伪元素选择器 &lt;/b &gt; 的语法格式为  <code>::伪元素</code> ，一定不要忘记 ::。伪元素选择器只能和基本选择器配合使用，并且一个选择器只能使用一个伪元素选择器，如果要为一个选择器增加多个伪元素选择器需要分别编写。</p>\n<h3 id=\"before-和-after\"><a class=\"anchor\" href=\"#before-和-after\">#</a> before 和 after</h3>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n        a::after&#123;\n            content: &quot;→&quot;;\n        &#125;\n        a::before&#123;\n            content: &quot;♥&quot;;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n        &lt;a href=&quot;https://antmoe.com&quot;&gt;这是一个测试内容&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/832afe33ly1gaio8klqf7j20k50iadgw.jpg\" alt=\"\" /></p>\n<h3 id=\"first-letter\"><a class=\"anchor\" href=\"#first-letter\">#</a> first-letter</h3>\n<p>&lt;b&gt;::first-letter&lt;/b&gt; 伪元素的作用是为匹配元素的文本内容的第一个字母设置样式内容。 如下示例代码展示了 **::first-letter 伪元素 ** 的用法：</p>\n<pre><code>p::first-letter &#123;\n  font-size: 130%;\n&#125;\n</code></pre>\n<h3 id=\"first-line-伪元素\"><a class=\"anchor\" href=\"#first-line-伪元素\">#</a> first-line 伪元素</h3>\n<p>&lt;b&gt;::first-line&lt;/b&gt; 伪元素的作用是为匹配 HTML 元素的文本内容的第一行设置样式内容。 如下示例代码展示了 **::first-line 伪元素 ** 的用法：</p>\n<pre><code>.line::first-line&#123;\n            background-color: tomato;\n        &#125;\n</code></pre>\n<h3 id=\"selection-伪元素\"><a class=\"anchor\" href=\"#selection-伪元素\">#</a> ::selection 伪元素</h3>\n<p>&lt;b&gt;::selection&lt;/b&gt; 伪元素的作用是匹配用户在 HTML 页面选中的文本内容（比如使用鼠标或其他选择设备选中的部分）设置高亮效果。如下示例代码展示了 **::selection 伪元素 ** 的用法：</p>\n<pre><code>p::selection &#123;\n    color: gold;\n    background-color: red;\n&#125;\n</code></pre>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/832afe33ly1gaiohh13mbg20ok0950su.gif\" alt=\"\" /><br />\n&lt;blockquote&gt;<br />\n&lt;p&gt; 注意：&amp;nbsp 只有一小部分 CSS 属性可以用于::selection 伪元素：&lt;/p&gt;<br />\n&lt;ul&gt;<br />\n&lt;li&gt;color 属性 &lt;/li&gt;<br />\n&lt;li&gt;background-color 属性 &lt;/li&gt;<br />\n&lt;li&gt;cursor 属性 &lt;/li&gt;<br />\n&lt;li&gt;caret-color 属性 &lt;/li&gt;<br />\n&lt;li&gt;outline 属性 &lt;/li&gt;<br />\n&lt;li&gt;text-decoration 属性 &lt;/li&gt;<br />\n&lt;li&gt;text-emphasis-color 属性 &lt;/li&gt;<br />\n&lt;li&gt;text-shadow 属性 &lt;/li&gt;<br />\n&lt;/ul&gt;<br />\n&lt;/blockquote&gt;<br />\n&lt;font color=&quot;red&quot; size=5&gt; 最后感谢原创！！！支持原创 &lt;/font&gt;</p>\n",
            "tags": [
                "技术",
                "CSS"
            ]
        },
        {
            "id": "http://yoursite.com/codeforces-div4/",
            "url": "http://yoursite.com/codeforces-div4/",
            "title": "codeforces div4",
            "date_published": "2020-05-12T00:40:16.000Z",
            "content_html": "<p>&lt;blockquote&gt;<br />\n 唯一一场每道题都有思路的比赛，感觉还行，虽然有思路不代表能 AC，不过还是很开心的，因为除了 E 题的桶没想到外其他都是自力更生做出来的😊<br />\n&lt;/blockquote&gt;<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/uncleacc/Sucai/8~1.webp\" alt=\"\" /></p>\n<h2 id=\"a-sum-of-round-numbers\"><a class=\"anchor\" href=\"#a-sum-of-round-numbers\">#</a> A Sum of Round Numbers</h2>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<p>签到题，就是遍历数的每一位，求出非 0 的位数有几位，然后 int 一个 v=1，之后没走一个数 v*=10，然后当一位数不等于 0 时就乘上 v 就行了，这道题用字符串应该更简单，但是我想试试用 while，练练手</p>\n<h3 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> CODE</h3>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string.h&gt;\n#define ios ios::sync_with_stdio(0)\nusing namespace std;\nconst int MAXN=1e4+100;\nint main()\n&#123;\n\tios;\n\tint t,k;\n\tcin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tcin&gt;&gt;k;\n\t\tint cnt=0,x=k,v=1;\n\t\twhile(k/10)&#123;\n\t\t\tint tt=k%10;\n\t\t\tif(tt!=0) cnt++;\n\t\t\tk/=10;\n\t\t&#125;\n\t\tcout&lt;&lt;cnt+1&lt;&lt;endl;\n\t\twhile(x/10)&#123;\n\t\t\tint tt=x%10;\n\t\t\tif(x/10&amp;&amp;tt!=0) cout&lt;&lt;tt*v&lt;&lt;&quot; &quot;;\n\t\t\tx/=10; v*=10;\n\t\t&#125;\n\t\tcout&lt;&lt;(x%10)*v&lt;&lt;endl;\n\t&#125;\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"b-same-parity-summands\"><a class=\"anchor\" href=\"#b-same-parity-summands\">#</a> B - Same Parity Summands</h2>\n<h3 id=\"分析-2\"><a class=\"anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<p>这道题是给你一个 a 和 b，让你用 b 个同为偶数或者奇数的数加起来等于 a，输出这些数，刚开始我一直在找规律，感觉很麻烦，找了半小时也没涵盖所有情况，后来发现直接暴力枚举就行了，我们可以考虑极端，当都为奇数时，让除了最后一个数以外的数都是 1，然后最后一个数 = a-(b-1)，加起来正好等于 a，同理都为偶数时，让除了最后一个数以外的数全部变成 2，最后一个数为 n-2*(k-1)，条件都不符合输出 NO<s> 想通这个就 AC 了</s></p>\n<h3 id=\"code-2\"><a class=\"anchor\" href=\"#code-2\">#</a> CODE</h3>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string.h&gt;\n#define ios ios::sync_with_stdio(0)\nusing namespace std;\nconst int MAXN=1e4+100;\nint main()\n&#123;\n\tios;\n\tint t,k,n;\n\tcin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tcin&gt;&gt;n&gt;&gt;k;\n\t\tint m=n-(k-1);\n\t\tif(m&gt;0&amp;&amp;m%2)&#123;\n\t\t\tcout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;\n\t\t\tfor(int i=0;i&lt;k-1;i++)&#123;\n\t\t\t\tcout&lt;&lt;1&lt;&lt;&quot; &quot;;\n\t\t\t&#125;\n\t\t\tcout&lt;&lt;m&lt;&lt;endl;\n\t\t\tcontinue;\n\t\t&#125;\n\t\tm=n-2*(k-1);\n\t\tif(m&gt;0&amp;&amp;m%2==0)&#123;\n\t\t\tcout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;\n\t\t\tfor(int i=0;i&lt;k-1;i++)&#123;\n\t\t\t\tcout&lt;&lt;2&lt;&lt;&quot; &quot;;\n\t\t\t&#125;\n\t\t\tcout&lt;&lt;m&lt;&lt;endl;\n\t\t\tcontinue;\n\t\t&#125;\n\t\tcout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;\n\t\t\n\t\t\n\t&#125;\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"c-k-th-not-divisible-by-n\"><a class=\"anchor\" href=\"#c-k-th-not-divisible-by-n\">#</a> C - K-th Not Divisible by n</h2>\n<h3 id=\"分析-3\"><a class=\"anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<p>看题目就知道大意，不被 n 整除的第 K 个数，首先我们清楚被 N 整除的数之间的数数量一定是相同的，比如能整除 8 的：8 16 24... 数之间都相差 8，那这就是一个找规律嘛，用 “%” 找到该数在一段区间的那个位置，然后用 “/” 找到在第几个区间就行了</p>\n<h3 id=\"code-3\"><a class=\"anchor\" href=\"#code-3\">#</a> CODE</h3>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string.h&gt;\n#define ios ios::sync_with_stdio(0)\nusing namespace std;\nconst int MAXN=1e4+100;\nint main()\n&#123;\n\tios;\n\tint t,k,n;\n\tcin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tint a,b;\n\t\tcin&gt;&gt;a&gt;&gt;b;\n\t\tint k=b%(a-1);\n\t\tif(k==0)&#123;\n\t\t\tcout&lt;&lt;(b/(a-1)*a)-1&lt;&lt;endl;\n\t\t&#125;\n\t\telse cout&lt;&lt;(b/(a-1)*a)+k&lt;&lt;endl;\n\t&#125;\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"d-alice-bob-and-candies\"><a class=\"anchor\" href=\"#d-alice-bob-and-candies\">#</a> D. Alice, Bob and Candies</h2>\n<h3 id=\"分析-4\"><a class=\"anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<p>这道题好长啊，我第一眼就被吓住了，~~ 不战而屈人之兵，不过狠下心来读一读，发现就是一个双向指针往中间合拢，<s>好像这叫双向队列</s>，再多定义几个变量记录每次每个人吃多少，每个人上次吃了多少，就是一个模拟，只要能写对条件，就能 AC 了</p>\n<h3 id=\"code-4\"><a class=\"anchor\" href=\"#code-4\">#</a> CODE</h3>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string.h&gt;\n#define ios ios::sync_with_stdio(0)\nusing namespace std;\nconst int MAXN=1e4;\nint val[MAXN];\nint main()\n&#123;\n\tios;\n\tint t; cin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tint n,pa=0,pb=0,flg=0;; cin&gt;&gt;n;\n\t\tint sum=0;\n\t\tfor(int i=1;i&lt;=n;i++)&#123;\n\t\t\tcin&gt;&gt;val[i];\n\t\t\tsum+=val[i];\n\t\t&#125;\n\t\tint ea=0,eb=0,cnt=1,sa,sb,head=1,tail=n;\n\t\twhile(tail-head&gt;=0)&#123;\n\t\t\tsa=0; sb=0;\n\t\t\tif(flg==0&amp;&amp;sum-ea-eb&gt;pb)&#123;\n\t\t\t\twhile(sa&lt;=pb)&#123;\n\t\t\t\t\tsa+=val[head];\n\t\t\t\t\tea+=val[head];\n\t\t\t\t\thead++; \n\t\t\t\t&#125;\n\t\t\t\tpa=sa; flg=1; cnt++;\n\t\t\t\tcontinue;\n\t\t\t&#125;\n\t\t\tif(flg==1&amp;&amp;sum-ea-eb&gt;pa)&#123;\n\t\t\t\twhile(sb&lt;=pa)&#123;\n\t\t\t\t\tsb+=val[tail];\n\t\t\t\t\teb+=val[tail];\n\t\t\t\t\ttail--;\n\t\t\t\t&#125;\n\t\t\t\tpb=sb; flg=0; cnt++;\n\t\t\t\tcontinue;\n\t\t\t&#125;\n\t\t\tcnt++;\n\t\t\tif(flg==0)&#123;\n\t\t\t\tea+=sum-ea-eb;\n\t\t\t\tbreak;\n\t\t\t&#125;else&#123;\n\t\t\t\teb+=sum-ea-eb;\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t&#125;\n\t\tcout&lt;&lt;cnt-1&lt;&lt;&quot; &quot;&lt;&lt;ea&lt;&lt;&quot; &quot;&lt;&lt;eb&lt;&lt;&quot; &quot;&lt;&lt;endl;\n\t&#125; \n\treturn 0;\n&#125;\n双向队列超级简单，水题\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\ndeque&lt;int&gt; dq;\nint main()\n&#123;\t\n\tint t;\n\tcin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tdq.clear();\n\t\tint n; cin&gt;&gt;n;\n\t\tfor(int i=1;i&lt;=n;i++)&#123;\n\t\t\tint temp; cin&gt;&gt;temp;\n\t\t\tdq.push_back(temp);\n\t\t&#125;\n\t\tll pa=0,pb=0,suma=0,sumb=0,res=1,ansa=0,ansb=0,cnt=0;\n\t\twhile(!dq.empty())&#123;\n\t\t\tcnt++;\n\t\t\tsuma=sumb=0;\n\t\t\tif(res&amp;1)&#123;\n\t\t\t\twhile(suma&lt;=pb&amp;&amp;!dq.empty())&#123;\n\t\t\t\t\tsuma+=dq.front();\n\t\t\t\t\tdq.pop_front();\n\t\t\t\t&#125;\n\t\t\t\tansa+=suma; \n\t\t\t\tpa=suma;\n\t\t\t&#125;else&#123;\n\t\t\t\twhile(sumb&lt;=pa&amp;&amp;!dq.empty())&#123;\n\t\t\t\t\tsumb+=dq.back();\n\t\t\t\t\tdq.pop_back();\n\t\t\t\t&#125;\n\t\t\t\tansb+=sumb;\n\t\t\t\tpb=sumb;\n\t\t\t&#125;\n\t\t\tres++;\n\t\t&#125;\n\t\tcout&lt;&lt;cnt&lt;&lt;&quot; &quot;&lt;&lt;ansa&lt;&lt;&quot; &quot;&lt;&lt;ansb&lt;&lt;endl;\n\t&#125;\n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"e-special-elements\"><a class=\"anchor\" href=\"#e-special-elements\">#</a> E. Special Elements</h2>\n<h3 id=\"分析-5\"><a class=\"anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<p>最好理解的一道题目🌝也是我唯一一道看了题解的题目😂一个前缀和，这道题数据量很小，只有 8000，直接装进桶里就行了，而我就是没想到，一直在纠结怎么降低复杂度（好菜啊）求出每一个区间的和看看这个和对应的桶编号里面装没装数，<s>其实是道水题</s></p>\n<h3 id=\"code-5\"><a class=\"anchor\" href=\"#code-5\">#</a> CODE</h3>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string.h&gt;\n#define ios ios::sync_with_stdio(0)\nusing namespace std;\nconst int MAXN=1e4;\nint val[MAXN],book[MAXN];\nint main()\n&#123;\n\tios;\n\tint t; cin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tmemset(book,0,sizeof book);\n\t\tmemset(val,0,sizeof val);\n\t\tint n; cin&gt;&gt;n;\n\t\tfor(int i=1;i&lt;=n;i++)&#123;\n\t\t\tcin&gt;&gt;val[i];\n\t\t\tbook[val[i]]++;\n\t\t\tval[i]+=val[i-1];\n\t\t&#125;\n\t\tint cnt=0;\n\t\tfor(int i=0;i&lt;n-1;i++)&#123;\n\t\t\tfor(int j=i+2;j&lt;=n;j++)&#123;\n\t\t\t\tint sum=val[j]-val[i];\n//\t\t\t\tcout&lt;&lt;sum&lt;&lt;' '&lt;&lt;book[sum]&lt;&lt;endl;\n\t\t\t\tif(sum&lt;=n&amp;&amp;book[sum])&#123;\n\t\t\t\t\tcnt+=book[sum]; \t\t\t\t\t\n\t\t\t\t\tbook[sum]=0;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;\n\t\tcout&lt;&lt;cnt&lt;&lt;endl;\n\t&#125; \n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"f-binary-string-reconstruction\"><a class=\"anchor\" href=\"#f-binary-string-reconstruction\">#</a> F - Binary String Reconstruction</h2>\n<h3 id=\"分析-6\"><a class=\"anchor\" href=\"#分析-6\">#</a> 分析</h3>\n<p>又是思维题，给你一个 n0,n1,n2 让你构造一个二进制序列，这个序列子序列中 00 的个数为 n0，01 或 10 的个数为 n1，11 的个数为 n2，首先 n0 和 n2 的序列容易构造，因为只包含一个数字，n1 我们可以定义顺序为 1010...n1=1:10 n1=2:101 n1=3:1010，每次增加一个数，单独构造容易，合起来难，三个序列合起来中间肯定会多出一些，所以只要在本上演算一下，再把多出的那一部分去掉就行了，然后我构造的序列顺序是 n0n2n1，感觉这样构造简单🐶说实话我交代码时都没敢想能 AC，因为感觉没考虑全，但是测试几组数据发现能过就抱着试一试的态度交上去了，结果 A 了😄</p>\n<h3 id=\"code-6\"><a class=\"anchor\" href=\"#code-6\">#</a> CODE</h3>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\n#include&lt;string.h&gt;\n#define ios ios::sync_with_stdio(0)\nusing namespace std;\nconst int MAXN=1e4;\nint val[MAXN],book[MAXN];\nint main()\n&#123;\n\tios;\n\tint t; cin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tint n0,n1,n2;\n\t\tstring ans;\n\t\tcin&gt;&gt;n0&gt;&gt;n1&gt;&gt;n2;\n\t\tfor(int i=1;i&lt;=n0+1;i++)&#123;\n\t\t\tif(n1!=0||n1==0&amp;&amp;n2==0) ans+=&quot;0&quot;;\n\t\t&#125;\n\t\tfor(int i=1;i&lt;=n2;i++)&#123;\n\t\t\tans+=&quot;1&quot;;\n\t\t&#125;\n\t\tfor(int i=1;i&lt;=n1;i++)&#123;\n\t\t\tif(i%2) ans+=&quot;1&quot;;\n\t\t\telse ans+=&quot;0&quot;;\n\t\t&#125;\n\t\tif(n0==0&amp;&amp;n1==0) ans+=&quot;1&quot;;\n\t\tcout&lt;&lt;ans&lt;&lt;endl;\n\t&#125; \n\treturn 0;\n&#125;\n</code></pre>\n<h2 id=\"g-special-permutation\"><a class=\"anchor\" href=\"#g-special-permutation\">#</a> G - Special Permutation</h2>\n<h3 id=\"分析-7\"><a class=\"anchor\" href=\"#分析-7\">#</a> 分析</h3>\n<p>说实话我不知道这道题为啥放在最后，<s>感觉难度并不大，反而挺简单的</s>🌚就是让你构造一个相邻两个数之差的绝对值在 2 到 4 的区间内（闭区间），我们只要把奇偶分开就行了，但是我有一个疑问，我的思路是把偶数写在前面奇数的倒序列放在后面，例如：<br />\n8：2 4 6 8 7 5 3 1<br />\n 很明显只有中间不符合条件，所以只动中间就行了，让 7 和 5（奇数序列的前两个）交换：<br />\n8：2 4 6 8 5 7 3 1（满足条件）<br />\n再举个例子：<br />\n9：2 4 6 8 9 7 5 3 1<br />\n 还是只动中间，因为 9 比 8（奇数第一个和偶数最后一个）大所以让 5 跑到 9 中间（奇数第 3 个移动到奇数和偶数序列之间）：<br />\n9：2 4 6 8 5 9 7 3 1（满足条件）<br />\n这样的思路我仔细想了想感觉没毛病，就交了，结果 wrong 了？我不服气，发现中间可能是换行的问题，又交又 wrong...<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/uncleacc/Sucai/5~1.webp\" alt=\"\" /><br />\n 我枯了，为啥？<br />\n后来换思路：<br />\n给 2 4 1 3 的序列两边添加数，先左后右轮换添加，例如：</p>\n<ol>\n<li>8：2 4 1 3</li>\n<li>8：5 2 4 1 3</li>\n<li>8：5 2 4 1 3 6</li>\n<li>8：7 5 2 4 1 3 6</li>\n<li>8：7 5 2 4 1 3 6 8<br />\n 完成～，交了 AC 了。。AC 后看了测试数据发现我原来的代码测试数据 1 应该是对的啊！希望网友那位可以为我解惑（不胜感激）<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/uncleacc/Sucai/7~1.webp\" alt=\"\" /></li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/uncleacc/Sucai/6~1.webp\" alt=\"\" /></p>\n<h3 id=\"wrong-code\"><a class=\"anchor\" href=\"#wrong-code\">#</a> wrong CODE</h3>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\n#include&lt;string.h&gt;\n#define ios ios::sync_with_stdio(0)\nusing namespace std;\nconst int MAXN=1e4;\nvoid swap(int &amp;a,int &amp;b)&#123;\n\tint t=a;\n\ta=b;\n\tb=t;\n&#125;\nint val[MAXN],book[MAXN];\nint main()\n&#123;\n\tios;\n\tint t; cin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tmemset(val,0,sizeof val); \n\t\tint n; cin&gt;&gt;n;\n\t\tif(n==2||n==3)&#123;\n\t\t\tcout&lt;&lt;-1&lt;&lt;endl;\n\t\t\tcontinue;\n\t\t&#125;\n\t\tint tail=0;\n\t\tfor(int i=2;i&lt;=n;i+=2)&#123;\n\t\t\tval[++tail]=i;\n\t\t&#125;\n\t\tint flag=tail;\n\t\tint p=n%2?n:n-1;\n\t\tfor(int i=p;i&gt;=1;i-=2)&#123;\n\t\t\tval[++tail]=i;\n\t\t&#125;\n\t\tif(val[flag+1]&lt;val[flag]) swap(val[flag+1],val[flag+2]);\n\t\telse&#123;\n\t\t\tfor(int i=1;i&lt;=n;i++)&#123;\n\t\t\t\tif(i==flag+1)&#123;\n\t\t\t\t\tprintf(&quot;%d%c&quot;,val[flag+3],i==n?'\\n':' ');\n\t\t\t\t&#125;\n\t\t\t\tif(i==flag+3)&#123;\n\t\t\t\t\tcontinue;\n\t\t\t\t&#125;\n\t\t\t\tprintf(&quot;%d%c&quot;,val[i],i==n?'\\n':' ');\n\t\t\t&#125;\n\t\t\tif(n==5) cout&lt;&lt;endl;\n\t\t\tcontinue;\n\t\t&#125;\n\t\tfor(int i=1;i&lt;=n;i++) printf(&quot;%d%c&quot;,val[i],i==n?'\\n':' ');\n\t&#125; \n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"ac-code\"><a class=\"anchor\" href=\"#ac-code\">#</a> AC CODE</h3>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;string&gt;\n#include&lt;string.h&gt;\n#include&lt;algorithm&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nstring ans;\nvoid bd(int n)&#123;\n\tif(n&lt;=9)&#123;\n\t\tans=(char)(n+'0')+ans;\n\t&#125;else&#123;\n\t\twhile(n!=0)&#123;\n\t\t\tchar c=(char)(n%10+'0');\n\t\t\tans=c+ans;\n\t\t\tn/=10;\n\t\t&#125;\n\t&#125;\n&#125;\nvoid pd(int n)&#123;\n\t\tif(n&lt;=9)&#123;\n\t\tans+=(char)(n+'0');\n\t&#125;else&#123;\n\t\tchar ch[2000];\n\t\tint tail=0;\n\t\twhile(n!=0)&#123;\n\t\t\tchar c=(char)(n%10+'0');\n\t\t\tch[++tail]=c;\n\t\t\tn/=10;\n\t\t&#125;\n\t\tfor(int i=tail;i&gt;=1;i--)&#123;\n\t\t\tans+=ch[i];\n\t\t&#125;\n\t&#125;\n&#125;\nint main()\n&#123;\n\tint t; cin&gt;&gt;t;\n\twhile(t--)&#123;\n\t\tans.clear();\n\t\tint n; cin&gt;&gt;n;\n\t\tif(n&lt;=3)&#123;\n\t\t\tputs(&quot;-1&quot;);\n\t\t\tcontinue;\n\t\t&#125;\n\t\tans+=&quot;2 4 1 3&quot;;\n\t\tint flag=1;\n\t\tfor(int i=5;i&lt;=n;i++)&#123;\n\t\t\tif(i%2)&#123;\n\t\t\t\tans=&quot; &quot;+ans;\n\t\t\t\tbd(i);\n\t\t\t&#125;\n\t\t\telse&#123;\n\t\t\t\tans+=&quot; &quot;;\n\t\t\t\tpd(i);\n\t\t\t&#125;\n\t\t&#125;\n\t\tcout&lt;&lt;ans&lt;&lt;endl;\n&#125;\n</code></pre>\n<p>Ending~ 撒花 &lt;font color=&quot;red&quot; size=6&gt; 不要白嫖了，留下一个赞吧👍&lt;font&gt;</p>\n",
            "tags": [
                "题目",
                "比赛"
            ]
        },
        {
            "id": "http://yoursite.com/chafen/",
            "url": "http://yoursite.com/chafen/",
            "title": "差分",
            "date_published": "2020-04-14T08:06:07.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>题目：</p>\n<p>输入一个长度为 n 的整数序列。<br />\n接下来输入 m 个操作，每个操作包含三个整数 l, r, c，表示将序列中 [l, r] 之间的每个数加上 c。<br />\n请你输出进行完所有操作后的序列。</p>\n<p>输入格式</p>\n<p>第一行包含两个整数 n 和 m。<br />\n第二行包含 n 个整数，表示整数序列。<br />\n接下来 m 行，每行包含三个整数 l，r，c，表示一个操作。</p>\n<p>输出格式</p>\n<p>共一行，包含 n 个整数，表示最终序列。</p>\n<h2 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h2>\n<p>对一个区间内的数加 C，如果暴力加，会浪费很多时间，我们可以开一个新数组用于差分操作，数组下标就代表数轴上的每一个数，每次给定一个区间，把以区间左端点未下标的数组值加上 C，而以（区间右端点 + 1）为下标的数组值减去 C，进行 m 次操作后，再求一次前缀和并加上原来数组的值就是进行区间操作后的数组，参考下图：<br />\n<img data-src=\"%E5%B7%AE%E5%88%86/0.jpg\" alt=\"\" /></p>\n<h2 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> Code</h2>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nint a[100],b[100];  //例题，开的很小，你可以开大\nint main()\n&#123;\n//\tfreopen(&quot;test.txt&quot;,&quot;r&quot;,stdin); \n\tint n,m;\n\tcin&gt;&gt;n&gt;&gt;m;\n\tfor(int i=1;i&lt;=n;i++)&#123;\n\t\tcin&gt;&gt;a[i];\n//\t\tb[i]+=a[i];\n//\t\tb[i+1]-=a[i];  //也可以初始化b数组就加上a数组的值，如果这样做了，下面就不能加a数组的值了\n\t&#125;\n\tfor(int i=1;i&lt;=m;i++)&#123;\n\t\tint l,r,c;\n\t\tcin&gt;&gt;l&gt;&gt;r&gt;&gt;c;\n\t\tb[l]+=c;\n\t\tb[r+1]-=c;\n\t&#125;\n\tfor(int i=1;i&lt;=n;i++) b[i]+=b[i-1]; //前缀和\n\tfor(int i=1;i&lt;=n;i++) cout&lt;&lt;b[i]+a[i]&lt;&lt;&quot; &quot;;  //一定要记得加上原数组的值\n&#125;\n</code></pre>\n<blockquote>\n<p>复杂度： O (N)，小于 1e8 的数据量都可以过</p>\n</blockquote>\n<p>很简单的算法吧（owo）</p>\n",
            "tags": [
                "算法",
                "算法"
            ]
        },
        {
            "id": "http://yoursite.com/chabingji/",
            "url": "http://yoursite.com/chabingji/",
            "title": "查并集",
            "date_published": "2020-04-05T14:05:45.000Z",
            "content_html": "<p>查并集也是一种比较常用的算法，有必要掌握<br />\n下面文章转载于 CSDN 上的一篇博客，我觉得写的很详细，就把它贴出来吧<br />\n地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhY2tlcl9aaGlEaWFuL2FydGljbGUvZGV0YWlscy82MDk2NTU1Ng==\">https://blog.csdn.net/Hacker_ZhiDian/article/details/60965556</span></p>\n<p>基础</p>\n<p>对于今天要总结的算法，我想先通过一道题目来看一下：</p>\n<p>假设现在我有一个任务交给你：要求你查看 id 为 x 和 id 为 y 的两个人是不是朋友，<br />\n在一开始我会在第一行中输入 3 个数字 n、m 、k。<br />\nn 是代表总人数。<br />\n接下来 m 行，每一行我会输入两个数字： Xi 、 Yi， 代表 id 为 Xi 和 id 为 Yi 的两个人是朋友（注意：朋友的朋友也是朋友），<br />\n接下来 k 行，每一行我也会输入两个数字： a 和 b ，代表我要你查询 id 为 a 和 id 为 b 的两个人是不是朋友，<br />\n如果这两个人是朋友，那么在一行中输出 “yes” 否则在一行中输出 “no”。<br />\n数据约束：0 &lt; n, m, k &lt; 10000， 所有人的 id 都是正整数，并且 id 不会超过 n</p>\n<p>样例输入：</p>\n<pre><code>7 5 4\n1 3 \n2 4\n3 4\n1 4\n5 6\n1 4\n2 3\n2 5\n6 7\n</code></pre>\n<p>样例输出：</p>\n<pre><code>yes\nyes\nno\nno\n</code></pre>\n<p>在上面的题目中，如果没有说 “朋友的朋友也是朋友” 这句话，那么就好办了，我们直接用一个二维数组来记录每一组朋友的信息，然后进行筛选就行了。但是有了这句话，我们就不能简单的用二维数组来解决了。那么怎么解决呢？</p>\n<p>首先，我们可以这样想，我们先把所有的人看成独立的群体，也就是说每个人的朋友只有他自己，那么这样的话一开始就有 n 个朋友圈，之后当题目数据输入的时候我们将输入的 id 所代表的的两个人所在的两个朋友圈合并成一个大的朋友圈，那么在这个合并之后的朋友圈中，所有的人两两都是朋友（朋友的朋友也是朋友），不断重复上面的合并过程，直到题目中给的 m 行的朋友对数据全部都合并完成。之后要判断两个人是不是朋友只需要判断他们是不是在同一个朋友圈里面就可以了。</p>\n<p>我们用题目中给出的数据来模拟这个过程，先看代码：</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 10010;\n\nint f[N];\n\n/*\n* 将表示朋友圈的数组初始化，即将所有人的“朋友祖先”都设置为自己的 id ，\n* 于是就有了 n 个不同的朋友圈 \n*/\nvoid init(int n) &#123;\n    for(int i = 1; i &lt;= n; i++) &#123;\n        f[i] = i;\n    &#125;\n&#125;\n\n// 得到 id 为 v 的人的“朋友祖先”的 id \nint getFriend(int v) &#123;  \n    if(f[v] == v) &#123;\n        return v;\n    &#125;\n    /*\n    * 如果发现“朋友祖先”不是自己，那么他肯定被合并到别的朋友圈里面去了，\n    * 那么继续调用这个函数来找这个朋友圈里面的“朋友祖先”，\n    * 并且在这个过程中将找到的人都设置为同一个“朋友祖先”（因为都在同一个朋友圈里面） \n    */\n    return f[v] = getFriend(f[v]);\n&#125;\n\n// 将两个人所在的两个朋友圈合并为一个朋友圈 \nvoid merge(int a, int b) &#123;\n    int t1 = getFriend(a); // 得到左边的人的“朋友祖先” \n    int t2 = getFriend(b); // 得到右边的人的“朋友祖先” \n    /* 这里我们制定一个“靠左原则”：一旦发现两个人的“朋友祖先”不一样，\n    * 那么右边那个人的“朋友祖先”的“朋友祖先”设置为左边的人的“朋友祖先”，\n    * 当然，也可以制定“靠右原则” \n    */ \n    if(t1 != t2) &#123;  \n        f[t2] = t1;\n    &#125;\n&#125;\n\nint main() &#123;\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    int x, y;\n    init(n);\n\n    for(int i = 0; i &lt; m; i++) &#123;\n        cin &gt;&gt; x &gt;&gt; y;\n        merge(x, y);\n    &#125; \n    for(int i = 0; i &lt; k; i++) &#123;\n        cin &gt;&gt; x &gt;&gt; y;\n        // 如果两个人的“朋友祖先”不相同，证明他们不在同一个朋友圈内，也就不是朋友\n        if(getFriend(x) != getFriend(y)) &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl; \n        &#125; else &#123;\n            cout &lt;&lt; &quot;yes&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n\n    return 0;\n&#125; \n</code></pre>\n<p>用图来模拟这一过程：</p>\n<p><img data-src=\"https://img-blog.csdn.net/20170309180913015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFja2VyX1poaURpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" /></p>\n<p>如果不能理解可以把例题数据带进去代码中自己模拟一遍就知道了，最后我们来看一下运行结果：<br />\n<img data-src=\"https://img-blog.csdn.net/20170309184447706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFja2VyX1poaURpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" /></p>\n<p>我们可以加一段代码来输出合并之后的数组情况：</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 10010;\n\nint f[N];\n\n/*\n* 将表示朋友圈的数组初始化，即将所有人的“朋友祖先”都设置为自己的 id ，\n* 于是就有了 n 个不同的朋友圈 \n*/\nvoid init(int n) &#123;\n    for(int i = 1; i &lt;= n; i++) &#123;\n        f[i] = i;\n    &#125;\n&#125;\n\n// 得到 id 为 v 的人的“朋友祖先”的 id \nint getFriend(int v) &#123;  \n    if(f[v] == v) &#123;\n        return v;\n    &#125;\n    /*\n    * 如果发现“朋友祖先”不是自己，那么他肯定被合并到别的朋友圈里面去了，\n    * 那么继续调用这个函数来找这个朋友圈里面的“朋友祖先”，\n    * 并且在这个过程中将找到的人都设置为同一个“朋友祖先”（因为都在同一个朋友圈里面） \n    */\n    return f[v] = getFriend(f[v]);\n&#125;\n\n// 将两个人所在的两个朋友圈合并为一个朋友圈 \nvoid merge(int a, int b) &#123;\n    int t1 = getFriend(a); // 得到左边的人的“朋友祖先” \n    int t2 = getFriend(b); // 得到右边的人的“朋友祖先” \n    /* 这里我们制定一个“靠左原则”：一旦发现两个人的“朋友祖先”不一样，\n    * 那么右边那个人的“朋友祖先”的“朋友祖先”设置为左边的人的“朋友祖先”，\n    * 当然，也可以制定“靠右原则” \n    */ \n    if(t1 != t2) &#123;  \n        f[t2] = t1;\n    &#125;\n&#125;\n\nint main() &#123;\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    int x, y;\n    init(n);\n\n    for(int i = 0; i &lt; m; i++) &#123;\n        cin &gt;&gt; x &gt;&gt; y;\n        merge(x, y);\n    &#125;\n\n    /*\n    * 输出合并之后的数组情况\n    */\n    for(int i = 1; i &lt;= n; i++) &#123;\n        if(i != 1) &#123;\n            cout &lt;&lt; &quot; &quot;;\n        &#125;\n        cout &lt;&lt; f[i];\n    &#125;\n    cout &lt;&lt; endl;\n\n    for(int i = 0; i &lt; k; i++) &#123;\n        cin &gt;&gt; x &gt;&gt; y;\n        // 如果两个人的“朋友祖先”不相同，证明他们不在同一个朋友圈内，也就不是朋友\n        if(getFriend(x) != getFriend(y)) &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl; \n        &#125; else &#123;\n            cout &lt;&lt; &quot;yes&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n\n    return 0;\n\n&#125; \n</code></pre>\n<p>结果：</p>\n<p><img data-src=\"https://img-blog.csdn.net/20170309185244123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFja2VyX1poaURpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" /></p>\n<p>和我们在纸上模拟的结果一样，一共有三个朋友圈。<br />\n这个时候当数组某个位置的值等于其所在下标的时候，id 等于这个值的人就是这个朋友圈的 “朋友祖先”， 有多少个 “朋友祖先” 就有多少个朋友圈。</p>\n<p>Ok，其实上面说的这种算法思想就是查并集，其标准的描述也是通过树和森林来定义的：在一个森林中有很多棵不同的树，我们通过一些信息来将一些不同的分开的树合并成一棵大的树。在这道题目中，一开始森林中有 7 棵不同根节点的树，树的根节点在这道题目中就相当于 “朋友祖先”（7 个朋友圈，每个朋友圈中只有一个人，即为他自己，也是每个朋友圈的 “朋友祖先”），通过题中所给的信息不断合并朋友圈（合并森林中不同的树），合并结束之后森林中树的棵树或者不同的树的根节点的个数（“朋友祖先” 的个数）就是朋友圈的个数。</p>\n<p>好了，查并集的基本思想就总结到这里了，如果你想更深入的了解其优化，那么请往下看：<br />\n优化</p>\n<p>我们在刚刚合并两个不同的朋友圈为一个大朋友圈的时候，我们制定了一个 “靠左原则”，即为将右边的朋友圈作为子圈合并到左边那个朋友圈中，那么现在假设我们有这么两个朋友圈：</p>\n<p><img data-src=\"https://img-blog.csdn.net/20180305120413608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFja2VyX1poaURpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\" /></p>\n<p>如果说现在我们要 合并下标为 1 的人所在的朋友圈 和 下标为 2 的人所在的朋友圈，按照我们刚刚定制的 “靠左原则”，此时我们应该把 朋友圈 2 作为朋友圈 1 的子圈并且合并到 朋友圈 1 中。也就是执行一次我们上面代码中的 merge (1, 2) ，对那么合并之后的朋友圈就是：</p>\n<p><img data-src=\"https://img-blog.csdn.net/20180305122202998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFja2VyX1poaURpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\" /></p>\n<p>祖先坐标改变的部分我用红字表出来了。那么接下来，如果此时我要找出下标为 4 的人所在的朋友圈的祖先，因为此时两个朋友圈已经合并成一个了， 我们调用 getFriend (1) ，首先会查找到 3 ，然后是 2 ，然后是 1。也就是说此时我们要向上递归查找 3 次才能找到。这个效率相对来说不算高。那么问题在哪呢？其实是在我们合并两个朋友圈的时候定制的 “靠左原则”。对于上面那种情况，我们明明应该将左边的朋友圈合并到右边的朋友圈效率才更高，此时合并的结果应该是：</p>\n<p><img data-src=\"https://img-blog.csdn.net/20180305122440975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFja2VyX1poaURpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\" /></p>\n<p>此时再查找下标为 4 的人所在的朋友圈就只需要向上递归 2 次就可以了。那么我们应该如何确定合并朋友圈的方式呢？可能到这里你已经想到了：将高度较小的那一个朋友圈作为子圈合并到高度较大的朋友圈。那么我们怎么获取每个朋友圈的高度呢？我们可以用一个数组来保存每个朋友圈的高度，在合并的时候比较两个朋友圈的高度来确定合并方式，合并完成之后调整一下合并后的朋友圈高度。 在上面代码的基础上，我们给出实现代码：</p>\n<pre><code>int high[N]; // 一个全局数组。保存每个朋友圈的高度，初始时都是 0 \n\n// 省略其他代码......\n\n/**\n* 将两个人所在的两个朋友圈合并为一个朋友圈 \n* 这里通过两个朋友圈的高度来决定合并方式 \n*/\nvoid merge(int a, int b) &#123;\n    int t1 = getFriend(a); // 得到左边的人的“朋友祖先” \n    int t2 = getFriend(b); // 得到右边的人的“朋友祖先” \n    // 两个人的“朋友祖先”不一样，合并两个朋友圈 \n    if(t1 != t2) &#123;  \n        // 如果左边的朋友圈的高度大于右边的朋友圈的高度，\n        // 那么将右边的朋友圈合并到左边的朋友圈中 \n        if (high[t1] &gt; high[t2]) &#123;\n            f[t2] = t1;\n        // 否则就把左边的朋友圈合并到右边的朋友圈中 \n        &#125; else &#123;\n            f[t1] = t2;\n            // 如果当前两个朋友圈的高度相等，那么合并之后的朋友圈高度要加一\n            if (high[t1] == high[t2]) &#123;\n                high[t2]++;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n// 省略其他代码......\n</code></pre>\n<p>为了方便，我就只给出 merge 函数，因为只有 merge 函数改变了，其它函数都没变。<br />\nmerge 函数里面有一句注释：// 如果当前两个朋友圈的高度相等，那么合并之后的朋友圈高度要加一 。这句话可能会有点难理解，看一幅图就知道了：</p>\n<p><img data-src=\"https://img-blog.csdn.net/20180305125346468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFja2VyX1poaURpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\" /></p>\n<p>因为代码中设定的每个朋友圈初始高度为 0，, 所以为了统一，图中也设置只有一个人的朋友圈高度为 0，这里注意一下。经过这样优化之后，我们的查并集的效率就很高了。</p>\n<p>最后，我们来看一下程序的运行结果：</p>\n<p><img data-src=\"https://img-blog.csdn.net/20180305125905988?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFja2VyX1poaURpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\" /></p>\n<p>结果依然是 3 个朋友圈，并且之后判断两个人是否是同一个朋友圈的结果也是对的，但是每个朋友圈祖先的编号却和原来不一样，这其实是因为我们修改了合并两个朋友圈的方式，即从原来的 “靠左原则” 变成了 “比较朋友圈高度原则”。</p>\n<p>最后还是贴一下优化之后的完整代码：</p>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nconst int N = 10010;\n\nint f[N];\nint high[N]; // 保存每个朋友圈的高度，初始时都是 0 \n\n/*\n* 将表示朋友圈的数组初始化，即将所有人的“朋友祖先”都设置为自己的 id ，\n* 于是就有了 n 个不同的朋友圈 \n*/\nvoid init(int n) &#123;\n    for(int i = 1; i &lt;= n; i++) &#123;\n        f[i] = i;\n    &#125;\n&#125;\n\n// 得到 id 为 v 的人的“朋友祖先”的 id \nint getFriend(int v) &#123;  \n    if(f[v] == v) &#123;\n        return v;\n    &#125;\n    /*\n    * 如果发现“朋友祖先”不是自己，那么他肯定被合并到别的朋友圈里面去了，\n    * 那么继续调用这个函数来找这个朋友圈里面的“朋友祖先”，\n    * 并且在这个过程中将找到的人都设置为同一个“朋友祖先”（因为都在同一个朋友圈里面） \n    */\n    return f[v] = getFriend(f[v]);\n&#125;\n\n/**\n* 将两个人所在的两个朋友圈合并为一个朋友圈 \n* 这里通过两个朋友圈的高度来决定合并方式 \n*/\nvoid merge(int a, int b) &#123;\n    int t1 = getFriend(a); // 得到左边的人的“朋友祖先” \n    int t2 = getFriend(b); // 得到右边的人的“朋友祖先” \n    // 两个人的“朋友祖先”不一样，合并两个朋友圈 \n    if(t1 != t2) &#123;  \n        // 如果左边的朋友圈的高度大于右边的朋友圈的高度，\n        // 那么将右边的朋友圈合并到左边的朋友圈中 \n        if (high[t1] &gt; high[t2]) &#123;\n            f[t2] = t1;\n        // 否则就把左边的朋友圈合并到右边的朋友圈中 \n        &#125; else &#123;\n            f[t1] = t2;\n            // 如果当前两个朋友圈的高度相等，那么合并之后的朋友圈高度要加一， \n            if (high[t1] == high[t2]) &#123;\n                high[t2]++;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\nint main() &#123;\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    int x, y;\n    init(n);\n\n    for(int i = 0; i &lt; m; i++) &#123;\n        cin &gt;&gt; x &gt;&gt; y;\n        merge(x, y);\n    &#125;\n\n    /*\n    * 输出合并之后的数组情况\n    */\n    for(int i = 1; i &lt;= n; i++) &#123;\n        if(i != 1) &#123;\n            cout &lt;&lt; &quot; &quot;;\n        &#125;\n        cout &lt;&lt; f[i];\n    &#125;\n    cout &lt;&lt; endl;\n\n    for(int i = 0; i &lt; k; i++) &#123;\n        cin &gt;&gt; x &gt;&gt; y;\n        // 如果两个人的“朋友祖先”不相同，证明他们不在同一个朋友圈内，也就不是朋友\n        if(getFriend(x) != getFriend(y)) &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl; \n        &#125; else &#123;\n            cout &lt;&lt; &quot;yes&quot; &lt;&lt; endl;\n        &#125;\n    &#125;\n\n    return 0;\n\n&#125; \n</code></pre>\n<h2 id=\"模板题\"><a class=\"anchor\" href=\"#模板题\">#</a> 模板题</h2>\n<p>地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYW50aS5qaXN1YW5rZS5jb20vdC9UMTI2MA==\">https://nanti.jisuanke.com/t/T1260</span></p>\n<p>宗教信仰</p>\n<p>世界上有许多宗教，你感兴趣的是你学校里的同学信仰多少种宗教。你的学校有 nnn 名学生（0&lt;n≤500000 &lt; n \\le 500000&lt;n≤50000），你不太可能询问每个人的宗教信仰，因为他们不太愿意透露。但是当你同时找到 222 名学生，他们却愿意告诉你他们是否信仰同一宗教，你可以通过很多这样的询问估算学校里的宗教数目的上限。你可以认为每名学生只会信仰最多一种宗教。<br />\n输入格式</p>\n<p>输入包括多组数据。每组数据的第一行包括 nnn 和 mmm，0≤m≤n (n−1)/20 \\le m \\le n (n-1)/20≤m≤n (n−1)/2，其后 mmm 行每行包括两个数字 iii 和 jjj，表示学生 iii 和学生 jjj 信仰同一宗教，学生被标号为 111 至 nnn。</p>\n<p>输入以一行 n=m=0n = m = 0n=m=0 作为结束。<br />\n输出格式</p>\n<p>对于每组数据，先输出它的编号（从 111 开始），接着输出学生信仰的不同宗教的数目上限。</p>\n<p>输出时每行末尾的多余空格，不影响答案正确性<br />\n样例输入</p>\n<pre><code>10 9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n10 4\n2 3\n4 5\n4 8\n5 8\n0 0\n</code></pre>\n<p>样例输出</p>\n<pre><code>Case 1: 1\nCase 2: 7\n</code></pre>\n<p>AC 代码：</p>\n<pre><code>#include&lt;iostream&gt;\nusing namespace std;\nconst int N=50010;\nint f[N];\nint res=0;\nvoid init(int n)&#123;\n    for(int i=1;i&lt;=n;i++)&#123;\n        f[i]=i;\n    &#125;\n&#125;\nint getfriend(int v)&#123;\n    if(f[v]==v) return v;\n    else return f[v]=getfriend(f[v]);\n&#125;\nvoid merge(int a,int b)&#123;\n    \n    int x=getfriend(a);\n    int y=getfriend(b);\n    if(x!=y)&#123;\n        f[y]=x;\n        res++;\n    &#125;\n&#125;\nint main()\n&#123;\n    int n,m,k=0,x,y;\n    while(1)&#123;\n        res=0;\n        k++;\n        cin&gt;&gt;n&gt;&gt;m;\n        if(n==0&amp;&amp;m==0) break;\n        init(n);\n        for(int i=1;i&lt;=m;i++)&#123;\n            cin&gt;&gt;x&gt;&gt;y;\n            merge(x,y);\n        &#125;\n        cout&lt;&lt;&quot;Case &quot;&lt;&lt;k&lt;&lt;&quot;: &quot;;\n        cout&lt;&lt;n-res&lt;&lt;endl;\t\t\n    &#125;\n    \n    return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>制作不易，您的赞助是我最大的动力，谢谢观看（owo）</p>\n</blockquote>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://yoursite.com/BFS/",
            "url": "http://yoursite.com/BFS/",
            "title": "BFS模板题",
            "date_published": "2020-04-04T14:54:10.000Z",
            "content_html": "<p>上一篇文章讲了 dfs 的记忆化搜索，来看看上一道题 “仙岛求药”</p>\n<h2 id=\"仙岛求药\"><a class=\"anchor\" href=\"#仙岛求药\">#</a> 仙岛求药</h2>\n<p>少年李逍遥的婶婶病了，王小虎介绍他去一趟仙灵岛，向仙女姐姐要仙丹救婶婶。叛逆但孝顺的李逍遥闯进了仙灵岛，克服了千险万难来到岛的中心，发现仙药摆在了迷阵的深处。迷阵由 M×NM \\times NM×N 个方格组成，有的方格内有可以瞬秒李逍遥的怪物，而有的方格内则是安全。现在李逍遥想尽快找到仙药，显然他应避开有怪物的方格，并经过最少的方格，而且那里会有神秘人物等待着他。现在要求你来帮助他实现这个目标。</p>\n<p>输入格式</p>\n<p>第一行输入两个非零整数 MMM 和 NNN，两者均不大于 202020。MMM 表示迷阵行数，NNN 表示迷阵列数。</p>\n<p>接下来有 MMM 行，每行包含 NNN 个字符，不同字符分别代表不同含义:</p>\n<ol>\n<li>'@'：少年李逍遥所在的位置；2) '.'：可以安全通行的方格；3) '#'：有怪物的方格；4) '*'：仙药所在位置。</li>\n</ol>\n<p>输出格式</p>\n<p>输出一行，该行包含李逍遥找到仙药需要穿过的最少的方格数目 (计数包括初始位置的方块)。如果他不可能找到仙药，则输出 −1-1−1。</p>\n<p>输出时每行末尾的多余空格，不影响答案正确性</p>\n<p>样例输入 1</p>\n<p>8 8<br />\n.@##...#<br />\n#....#.#<br />\n#.#.##..<br />\n..#.###.<br />\n#.#...#.<br />\n..###.#.<br />\n...#.*..<br />\n.#...###</p>\n<p>样例输出 1</p>\n<p>10</p>\n<p>样例输入 2</p>\n<p>6 5</p>\n<p>.*.#.</p>\n<p>.#...</p>\n<p>..##.</p>\n<p>.....</p>\n<p>.#...</p>\n<p>....@</p>\n<p>样例输出 2</p>\n<p>8</p>\n<p>样例输入 3</p>\n<p>9 6</p>\n<p>.#..#.</p>\n<p>.#.*.#</p>\n<p>.####.</p>\n<p>..#...</p>\n<p>..#...</p>\n<p>..#...</p>\n<p>..#...</p>\n<p>#.@.##</p>\n<p>.#..#.</p>\n<p>样例输出 3</p>\n<p>-1</p>\n<p>ok，如果直接用 dfs 做而不加任何优化会 TLE，现在我们来用 BFS 做，BFS 和 DFS 比较，它的优点就是时间快，但相应的空间上也耗损的更多，个人感觉如果仅仅是打 ACM，这个特点比较好，毕竟大多数题还是卡时间而不是卡空间，来 see yi see BFS 吧</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200416093927119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FHTklORw==,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p><img data-src=\"\" alt=\"https://img-blog.csdnimg.cn/20200416093935363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FHTklORw==,size_16,color_FFFFFF,t_70\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200416093942750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FHTklORw==,size_16,color_FFFFFF,t_70\" alt=\"https://img-blog.csdnimg.cn/20200416093942750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FHTklORw==,size_16,color_FFFFFF,t_70\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200416093956703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FHTklORw==,size_16,color_FFFFFF,t_70\" alt=\"https://img-blog.csdnimg.cn/20200416093956703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FHTklORw==,size_16,color_FFFFFF,t_70\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200416094004328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FHTklORw==,size_16,color_FFFFFF,t_70\" alt=\"\" /></p>\n<p>还是比较容易理解的吧，毕竟只是一个模板没有加任何优化</p>\n<p>现在回到上一道题，贴代码：</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nstruct node&#123;\n\tint x,y;\n\tint step;\n\tint f;\n&#125;que[500];\nint vis[30][30];\nint main()\n&#123;\n\tint m,n,stx,sty,tgx,tgy,head=1,tail=1;  //定义了地图大小，起始坐标，目标坐标，队列的头和尾 \n\tint Next[4][2]=&#123;&#123;1,0&#125;,&#123;0,1&#125;,&#123;-1,0&#125;,&#123;0,-1&#125;&#125;;//定义了下一步的操作 \n\tchar map[30][30];//定义了地图 \n\tcin&gt;&gt;m&gt;&gt;n;//输入地图大小 \n\tfor(int i=0;i&lt;m;i++)&#123;\n\t\tfor(int j=0;j&lt;n;j++)&#123;\n\t\t\tscanf(&quot; %c&quot;,&amp;map[i][j]);//输入地图 \n\t\t\tif(map[i][j]=='@')&#123;//找到起始位置 \n\t\t\t\tstx=i; sty=j;\n\t\t\t&#125;\n\t\t\tif(map[i][j]=='*')&#123;//找到目标位置 \n\t\t\t\ttgx=i; tgy=j;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\tvis[stx][sty]=1;//标记起始位置 \n\tque[tail].x=stx;//初始化队列 \n\tque[tail].y=sty; \n\tque[tail].step=0;//开始位置步数为零 \n\tque[tail].f=0; \n\ttail++;       //tail指向队列最后一个元素的下一个位置 \n\tint tx,ty,flag=0; //定义一个临时坐标和flag判断是否到达目标位置 \n\twhile(head&lt;tail)&#123;\n\t\tfor(int i=0;i&lt;4;i++)&#123;  //移动坐标 \n\t\t\ttx=que[head].x+Next[i][0];\n\t\t\tty=que[head].y+Next[i][1];\n\t\t\tif(tx&lt;0||tx&gt;=m||ty&lt;0||ty&gt;=n) continue;//判断边界 \n\t\t\tif(!vis[tx][ty]&amp;&amp;map[tx][ty]!='#')&#123; //判断当前位置是否走过，当前位置能不能走 \n\t\t\t\tvis[tx][ty]=1;  //标记此位置已走过 \t\t\t\t \n\t\t\t\tque[tail].x=tx;  //入队 \n\t\t\t\tque[tail].y=ty;\n\t\t\t\tque[tail].f=head;  //新入队的父亲节点是队列的头 \n\t\t\t\tque[tail].step=que[que[tail].f].step+1; //当前步数等于父亲的步数加一 \n\t\t\t\ttail++;  //tail后移 \n\t\t\t&#125;\n\t\t\tif(tx==tgx&amp;&amp;ty==tgy)&#123;  //判断是否到到达目标点 \n\t\t\t\tflag=1;  //更新flag \n\t\t\t\tbreak;   //到达目标break \n\t\t\t&#125;\n\t\t&#125;\n\t\tif(flag==1) break;  //到达目标break \n\t\thead++;  //出队，让后面的点进行扩展 \n\t&#125;\n\tif(flag==1) cout&lt;&lt;que[tail-1].step&lt;&lt;endl;\n\telse cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;\t\n\t\n&#125;\n</code></pre>\n<p>如果您精通 STL 的容器，可以直接使用 STL 自带的 queue，这里只是模板，自己写一个队列并不难</p>\n<blockquote>\n<p>制作不易，可否赞助一下我这只小可怜两毛钱呢，小可怜已经连饭都吃不上了（owo）</p>\n</blockquote>\n",
            "tags": [
                "算法",
                "BFS"
            ]
        }
    ]
}